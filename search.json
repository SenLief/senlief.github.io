[{"title":"Arm机上部署Plex Media Server","url":"/2024/03/14/Arm%E6%9C%BA%E4%B8%8A%E9%83%A8%E7%BD%B2Plex%20Media%20Server/","content":"\nPlex是一套完整的家庭影音解决方案，可以自建PMS来打造属于自己的影音系统。\n\n前言PMS官方只有 amd64 的docker镜像，没有arm64 的镜像，但是给出了方案，就是自己编译arm64 镜像即可。Arm docker镜像解决方案：plexinc&#x2F;pms-docker: Plex Media Server Docker repo, for all your PMS docker needs. (github.com)\n编译docker arm镜像克隆镜像$ git clone https://github.com/plexinc/pms-docker.git$ cd pms-docker\n\n编译arm64镜像$ docker build -t plexinc/pms-docker:latest -f Dockerfile.arm64 .\n\n查看镜像$ docker images\n\n利用docker-compose 启动镜像docker-compose.ymlversion: &#x27;2&#x27;services:  plex:    container_name: plex    image: plexinc/pms-docker    restart: unless-stopped    ports:      - 32400:32400/tcp      - 3005:3005/tcp      - 8324:8324/tcp      - 32469:32469/tcp      - 1900:1900/udp      - 32410:32410/udp      - 32412:32412/udp      - 32413:32413/udp      - 32414:32414/udp    environment:      - TZ=Asia/Shanghai      - PLEX_CLAIM=&lt;claimToken&gt;\t\t\t- PLEX_UID=1000                                           - PLEX_GID=1000    hostname: &lt;hostname&gt;    volumes:      - &lt;path/to/plex/database&gt;:/config      - &lt;path/to/transcode/temp&gt;:/transcode      - &lt;path/to/media&gt;:/data\n\nTZ ：Asia&#x2F;ShanghaiPLEX_CLAIM ：Claim | Plex #点击链接获取，注意只有5分钟的时间，过期需要重新获取。PLEX_UID 、PLEX_GID ：$ id whoami&#96;&#96; 获取，我的为1000，1000&lt;path/to/plex/database&gt; ：config挂载本地的位置&lt;path/to/transcode/temp&gt; ：transcode解码器挂载本地的位置&lt;path/to/media&gt; ：数据的挂载位置\n启动镜像$ docker-compose up -d\n\n访问地址：ip:32400 ，可以用nginx反代这个端口，注意防火墙开放docker-compose中的端口。\n","categories":["笔记"],"tags":["plex","arm","pms"]},{"title":"DXP4800部署Alist实现多网盘聚合管理","url":"/2025/03/14/DXP4800%E9%83%A8%E7%BD%B2Alist%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BD%91%E7%9B%98%E8%81%9A%E5%90%88%E7%AE%A1%E7%90%86/","content":"缘起绿联系统是有网盘同步的功能的，目前已经实现了oneDrive和百度云盘的下载，但是创建同步任务是需要钱的，官方也承诺说会继续开发其他的网盘聚合，但是显而易见还是需要钱的，所以倒不如使用alist聚合网盘，利用已有的会员网盘，实现更多的网盘聚合管理。\nDocker Compose部署Alist不要使用应用中心的alist安装，因为无法更改compose.yml的配置\n前置需要\ndocker可以访问到docker hub，已加速或已代理\ncompose.yml文件默认放在共享文件夹/docker/alist下\n（进阶）若想挂载网盘到本地文件中管理需要熟悉linux和rclone\n\n编写compose.yml文件文件内容services:  alist:    image: &#x27;xhofe/alist:beta&#x27;    container_name: alist    volumes:      - &#x27;./alist:/opt/alist/data&#x27;      - &#x27;./data:/opt/alist/local&#x27;    ports:      - &#x27;5244:5244&#x27;    environment:      - PUID=1000      - PGID=10      - UMASK=022    restart: unless-stopped\n解释\n&#39;./alist:/opt/alist/data&#39;：这个是默认的尽量不动\n- &#39;./data:/opt/alist/local&#39;：如果你需要把网盘内容直接下载到NAS中则挂载这个卷\n\n截图\nAlist配置获取登录用户名和密码ssh登录后输入docker exec -it alist ./alist admin set NEW_PASSWORD 替换到其中的NEW_PASSWD为自己的密码即可。\n添加网盘存储参考官网教程：[https://alist.nn.ci/zh/guide/drivers/][https://alist.nn.ci/zh/guide/drivers/]\n添加本地存储如果我们想把网盘的内容直接下载到NAS中，或者从NAS中直接上传就需要添加本地存储。需要配置以下项：\n\n存储中驱动选择本机存储\n挂载路径为/local，不重复就可以\n根文件路径为/opt/alist/local，也就是compose.yml文件中配置的第二个挂载卷\n其他按需选择即可\n\n浏览器打开http://&lt;nas-ip&gt;:5244即可管理已经可以实现网盘和本地之间的上传和下载功能。\n\n网盘到本地直接在网页端选择网盘文件复制&#x2F;粘贴到local中即可\n本地到网盘需要先把上传的的文件复制到共享文件夹/alist/data下，然后网页端在local中找到这个文件复制粘贴到网盘中即可。\n\n网盘挂载到本地\n实际上alist我觉得已经够用了，不过如果能像操作本地文件一样在文件管理中管理，那显得确实很酷（但不算是好用）。\n\n原理利用rclone把alist的webdav挂载到本地文件夹，实现用文件管理器来管理，同时利用webui还能实现一些其他的功能。\n安全性rclone我使用是系统自带的rclone-webdav，由于挂载需要使用root账户运行，为了配置的方便我使用WebUI来控制，所以安全性有很大的问题，不建议在公网使用这种方式，配置WebUI认证的时候建议配置强密码。\nssh获取root权限ssh登录后输入sudo -i并输入当前账户的密码即可切换到root账户。\n编写rclone.service文件\n输入nano /etc/systemd/system/rclone.service并粘贴以下内容：[Unit]Description=Rclone Remote Control DaemonAfter=network.target[Service]Type=simpleEnvironment=RCLONE_RC_NO_OPEN_BROWSER=trueEnvironment=RCLONE_CONFIG=/root/.config/rclone/rclone.confExecStart=/usr/sbin/rclone-webdav rcd --rc-web-gui --rc-user admin --rc-pass 123456 --rc-web-gui-update --rc-web-fetch-url=https://s3.yuudi.dev/rwa/embed/version.json --rc-addr=0.0.0.0:5572Restart=on-failureExecStop=/usr/sbin/rclone-webdav rc core/quitKillMode=none[Install]WantedBy=multi-user.target\n\n重要：修改文件中的123456为强密码！！！2. 启动systemd.service   systemctl daemon-reload   systemctl start rclone.service\n配置rclone\n浏览器打开http://&lt;nas-ip&gt;:5572\n输入admin和上面设置的密码\n点击左上方存储池，新建存储池\n搜索webdav下一步，注意alist需要给用户开启webdav的相关权限，在alist的后台账户可以打开。\nurl：http://&lt;nas-ip&gt;:5244/dav\nuser：alist账户，需要有WebDAV权限的账户\npass：用户的密码\n下一步填写完即可\n\n挂载到本地\n点击左上方的挂载\n新建挂载点\n存储池：选择刚才新建的名称\n挂载点：/volume1/local/WebDav，我选择的是共享文件夹/local/WebDav，请注意这个文件夹必须存在才能挂载\n效果图\n\n结语可能只是更方面把网盘搬家回来吧，但是效果不太好，主要是下载量大了就会自动断流什么的，能怎么办？充钱呗。\nrclone挂载的方式不太建议，安全性堪忧，我比较好奇的是绿联系统居然内置了rclone！\n","categories":["笔记"],"tags":["Blog","DXP4800","alist","网盘","rclone"]},{"title":"DXP4800部署qBittorrent","url":"/2025/03/06/DXP4800%E9%83%A8%E7%BD%B2qBittorrent/","content":"\nNAS不就是用来下载小姐姐的~\n\n前置需求\nDocker配置过镜像加速器\n或配置了代理可以访问Docker Hub仓库\n\n使用Docker Compose编排项目打开Docker,选择项目，创建。\n\n项目名称：qbt\n存放路径：共享文件夹/docker/qbt （这个路径需要在docker文件夹中新建qbt文件夹）\nCompose配置 ：复制粘贴以下内容services:  qbittorrent:    image: linuxserver/qbittorrent    container_name: qbittorrent    environment:      - PUID=1000 # 更改为你的用户ID      - PGID=10 # 更改为你的组ID      - TZ=Asia/Shanghai # 时区，例如 &quot;Asia/Shanghai&quot;      - WEBUI_PORT=8080 # Web UI的端口    volumes:      - ./config:/config # 你的配置文件存储路径      - ./downloads:/downloads # 下载文件存储路径      - /volume1/docker/Plex/media/movie:/movie    ports:      - 8080:8080 # Web UI端口映射      - 36881:36881 # BitTorrent TCP端口      - 36881:36881/udp # BitTorrent UDP端口    restart: unless-stopped\n立即部署\n\ncompose.yml文件自定义配置其他配置不要动，主要修改2处配置即可\n\nvolumes\n./config:/config：不要修改\n./downloads:/downloads：这是默认的下载路径，可以正常挂载。\n/volume1/docker/Plex/media/movie:/movie：这是自定义挂载的位置，我已有视频的文件/volume1/docker/Plex/media/movie，后续的pt下载也希望下载到这个文件夹中，那么就可以把这个文件夹挂载到容器中的/movie\n\n\nports：可以默认不修改\n8080:8080：Web UI的端口，默认使用http://&lt;nas_ip&gt;:8080访问\n36881:36881：可以不改，不要使用6881端口，大部分站点不通，如果有防火墙记得放行这个端口的tcp/udp协议。\n\n\n\nqBittorrent WebUI配置配置qBittorrent.conf默认的打开http://&lt;nas_ip&gt;:8080会显示Unauthorized，我们需要配置一下配置文件。\n\nDocker项目中停止容器（必须）\n打开共享文件夹/docker/qbt/config/qBittorrent/qBittorrent.conf文件\n在[Preferences]项下添加以下两项，添加后类似于[Preferences]WebUI\\CSRFProtection=falseWebUI\\HostHeaderValidation=false\n\n保存后重启容器\n访问http://&lt;nas_ip&gt;:8080\n\n查看账号和密码新版本的账号和密码并不是以前的固定密码了，需要启动后去日志中查看随机生成的密码，在项目-qbt-日志中就能看到随机的密码。\n\n账号：admin\n密码：日志中的随机密码\n\nqBittorrent基础配置\n行为设置\n下载设置\n连接设置\nBitTorrent配置\nWebUI配置\n其他的默认即可，高级的配置自己摸索\n\n更换WebUI默认的WebUI在移动端是显示不齐的，这对在移动端管理添加了很多的麻烦，虽然也有一些app，但是本着无必要无增加实体的原则，还是换一套UI就可以了。\nVueTorrent项目地址: https://github.com/VueTorrent/VueTorrent\n\n桌面端Light\n桌面端Dark\n移动端\n\n安装\n下载zip包，当前版本v2.23.0，[V2.23.0版本下载][https://github.com/VueTorrent/VueTorrent/releases/download/v2.23.0/vuetorrent.zip]\n解压zip包，并把解压后的vuetorrent文件夹上传到NAS的qBittrent容器的config目录中。\n启用备用UI，填入路径/config/vuetorrent，刷新UI即可。\n\nEnjoy享受PT的乐趣吧，不建议用自带的下载来下载PT，很多的PT站对于客户端是有要求的，虽然自带的下载器也使用qbt或者tr来模拟，但以防万一，尽量不用。\n","categories":["笔记"],"tags":["Blog","DXP4800","绿联","qBittorrent","pt"]},{"title":"Obsidian利用Syncthing全平台同步终极方案","url":"/2025/02/27/Obsidian%E5%88%A9%E7%94%A8Syncthing%E5%85%A8%E5%B9%B3%E5%8F%B0%E5%90%8C%E6%AD%A5%E7%BB%88%E6%9E%81%E6%96%B9%E6%A1%88/","content":"\n或许这就是最好的Obsidian全平台同步方案，甚至在国内可能优于官方的同步，因为它的同步速度取决于你内网带宽！并且它不局限于同步Obsidian，也可以同步其他基于文件的的资料或者照片以及视频。\n\n前言Obsidian的同步最大的问题是IOS端，在桌面端我们可以利用OneDrive，Dropbox等工具来同步，但是在IOS端我们无法使用这些工具来同步其他app的数据，所以如果不使用官方的同步，我们只能依赖插件，例如remotely-save和live-sync 或者基于git的http插件以及working copy 来同步文件，这些插件的最大问题就是性能和对冲突的处理策略不友好，那么syncthing便是终极的同步方案！\nSyncthing 一个几乎实时的Obsidian同步方案，某些方面，它甚至优于官方同步。\nSyncthing的介绍以下来自[官网][https://syncthing.net/]\n\nSyncthing is a continuous file synchronization program. It synchronizes files between two or more computers in real time, safely protected from prying eyes. Your data is your data alone and you deserve to choose where it is stored, whether it is shared with some third party, and how it’s transmitted over the internet.\n\n总结来说：syncthing是一个开源的多端p2p同步工具。\nSyncthing的安装桌面端的下载地址：[官网下载][https://syncthing.net/downloads/]\nWindows端windows端有2类客户端，一类是基于命令行+web端ui的客户端，一类是集成ui客户端，两种都是一样的。\n集成UI客户端[SyncTrayzor下载地址][https://github.com/canton7/SyncTrayzor]\n基于WebUI的Base客户端建议下载安装版[Windows安装版][https://github.com/Bill-Stewart/SyncthingWindowsSetup/]运行：开启菜单中搜索syncthing，找到Start Syncthing打开即运行，没有窗口，没有托盘，这时我们打开浏览器，输入http://127.0.0.1:8384即可管理Syncthing。注意：安装版无法开机自启动，你可以安装以下步骤设置自启动。\n\n资源管理器打开%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Syncthing 复制Start Syncthing这个快捷方式\nwin+R输入shell:startup打开自启动文件夹\n把快捷方式粘贴到自启动文件夹中，下次开机会自动启动syncthing你也可以记住这个文件夹的位置，或者把Start Syncthing和Stop Syncthing快捷方式复制到桌面用于手动启动和关闭，也可以从开始菜单启停。\n\niPhone和iPad端\niPhone上一直没有一个友好的syncthing客户端，主要是无法跨沙箱，也就无法同步文件夹，这确实非常的难受，使用起来很受限，之前一直使用mobius sync这个收费的客户端，它能跨沙箱，但是如果体验后就必须保持后台，使用体验不算很好。直到开源的Synctrain的出现让IOS上的同步体验达到几乎无感。\n\nSynctrain[Github项目][https://github.com/pixelspark/sushitrain]App Store：[Download on the App Store][https://apps.apple.com/nl/app/synctrain/id6553985316] (非美区)TF：[Test beta versions through TestFlight][https://testflight.apple.com/join/2f54I4CM]\nMobius SyncApp Store下载，国区38元买断，也很不错的app。\n两个app最大的区别在于能否用快捷方式！\nSyncthing配置（仅演示局域网下的同步）以Windows端和iPhone同步为例，其他设备加入大同小异，但syncthing的中继和发现以及stun服务不友好，谨慎使用！\n\n在2端添加远程设备\nwindows浏览器打开http://127.0.0.1:8384，右上角操作&gt;显示ID 会显示出来二维码。\nIOS端Devices&gt;Add device &gt; Scan using camera 扫描二维码，右上角Add添加设备\n如果正常，浏览器会收到一条添加设备的通知，点击添加设备即可连接设备\n\n\n在2端添加共享文件夹Obsidian\n浏览器+添加文件夹\nObsidian文件夹点击，然后编辑,选择共享文件夹。\niPhone打开文件app，在我的iPhone&gt;Obsidian 中新建一个Obsidian的文件夹用于保存obsidian的数据 \niPhone端Folders中会显示发现了共享的Obsidian，选择Select existing filder &gt; 第3步中新建的Obsidian文件夹，显示警告选择继续即可，Synchronize选择All files，点击右上角Add folder\n\n\n\n配置Over，你可以在同步的文件任意的添加一些文件看看同步的情况如何\n配置自动化流程（灵魂）\n新建一个快捷指令添加以下2个Synctrain动作即可\nRescan folder: Folder选择上面的Obsidian文件夹，Subdirectory留空\nSynchronize for a while：Time填写15\n\n\n\n打开自动化，新建一个自动化流程\nApp选择Obsidian，已打开和已关闭 全部勾选，点击立即运行\n下一步选择刚才创建的快捷指令\n完美自动化！\n\n\n\n\n\n\n\n自动化流程就是打开app同步一次，关闭app同步一次，如果你怕同步不成功，手动打开Synctrain看一下是否同步即可。\n\nShow Time没录\n结语用了2天感觉体验还是相当不错的，不过只适合于个人使用，而且最好不要同时编辑两端，它不会比对文件，只会创建冲突文件。syncthing是有版本控制的，以及syncthing的公共中继有些问题，这些等进阶篇再写了。\n","categories":["笔记"],"tags":["Blog","syncthing","synctrain"]},{"title":"Realme GT5PRO 推送攻略","url":"/2024/03/13/Realme%20GT5PRO%20%E6%8E%A8%E9%80%81%E6%94%BB%E7%95%A5/","content":"\n国内安卓推送使用最多的就是华为和小米的push了，安装上大同小异，因为我有华为账号，所以安装hms推送以及fcm推送国际app。\n\nHMSPush华为推送（hmspush）应该是目前常用app都接入的一个推送，当然了除了微信这个毒瘤。\n准备工作\nhms core(酷安下载即可)\nhmspush(lspoxed模块)\n华为应用市场app\nlsposed+magisk\nscene(可选，把hms core转换成系统应用)、\nlibChecker app(可选，检查app是否适用于华为push)\n\n配置流程\n下载安装hms core 和华为应用商店 ，更新app最好也是在华为应用商店，有些app不同的渠道采用的不同的推送。\n安装hmspush 并在lsposed 中启用模块，并勾选推荐应用中的系统框架和HMS Core两个应用\n在LSPosed中HMSPush作用域中勾选需要利用hmspush 推送的app，这步主要是把app伪装成是华为设备在使用，如果用其他的工具伪装，可以不用配置相关作用域。\n配置好作用域后重启手机\n重启后打开hmspush.apk 或者在LSPosed中的模块打开，这时应该能看到需要推送的app了，但还是未注册的状态，我们需要重启一两次app来让其注册。\n待注册成功后，杀死app后台，关掉自启动权限，即可享受推送了。可以用qq来推送，记得打开系统的通知，要不不会弹出通知提醒。\n（可选）用scene把hmscore转换成系统应用，可以使有些app点击通知不能进入app的bug，如果有经验可以把hmscore中多余的活动禁用，不过我使用来看耗电量不多，可以忽略不记，我就没有动。\n\nFCM推送\n我们知道大部分的国际app是不支持华为推送的，不过除了hmspush之外，如果你能稳定连接mtalk.google.com 那么还可以使用fcm来推送\n\nFCM推送和HMSpush不同，FCM要求app本身就在后台才能推送，大部分的app因为已经在后台了，她就是自己推送了，所以说FCM更多的是来推送偶尔启动的app，比如outlook，gmail这类的app，虽然微信也能推送，但是不推荐，因为推送的很频繁还不如在后台让微信自己推送了。\n准备工作\n可以使用fcm服务\nfcmfix（lsposed模块，可以让app死掉，让fcm仍能推送）\nLSPosed\n\n配置流程\n国内不少地方fcm服务是可以连接的，但是都不稳，也就造成了链接无法长链接等，推送的不及时和不推送的情况，主要可以通过3种方式：\n\nfcm直连，广东地区能直连\n修改hosts让fcm能连上，主要是以下几个域名，如果有5g的话，可以用ipv6链接。\n代理以下域名\n拨号盘输入*#*#426#*#* 可以查看链接的情况，大部分都不是很稳定。mtalk.google.comalt1-mtal.google.comalt[2-8]-mtal.google.com #alt2-alt8都可以配置\n\n\n安装fcmfix ，在LSPosed 中的fcmfix 模块中选择系统框架 和Google Play服务 两个作用域\n\n打开fcmfix 模块勾选支持fcm 推送的模块，上面有提醒哪些app支持fcm\n\n打开支持fcm 推送的app自启动权限 ，fcmfix模块的原理类似于模拟了一个app的后台进程，当fcm推送过来的时候去拉起该app来推送，所以没有自启动的权限，fcmfix拉不起来app。\n\n重启手机\n\n\nfcm推送的缺点我们能看到fcm推送要求app必须要在后台的，除非app支持gms推送，但是大部分的app都不支持。我们通过fcmfix模块可以实现app不必在后台，但是需要能自启动，fcmfix模拟了一个app在后台的假象，当fcm推送过来的时候由fcmfix强拉app启动来推送通知，所以整个流程来看，fcm推送不适合短时间大量的推送已经长时间很多信息，例如微信这类的app，更适合于偶尔推送，这样的app不需要长时间在后台，但是又想及时的拿到通知的app，例如邮箱这类的应用。\nEnjoy！安装推送真的是比ios差的远，当然这也不是安卓的问题，主要是安卓不够强势啊。\n","categories":["笔记"],"tags":["realme","gt5pro","华为push","fcm"]},{"title":"Realme GT5PRO 解锁BL并安装Magisk","url":"/2024/03/13/Realme%20GT5PRO%20%E8%A7%A3%E9%94%81BL%E5%B9%B6%E5%AE%89%E8%A3%85Magisk/","content":"\nIphone13的续航和信号让我对Iphone失去了信心，也有很多年没有使用过安卓了，上一部还是mate20pro来着，趁着PDD活动，花了3000买了realme gt5pro 12+256，分享一下我的使用技巧。\n\n用机感受\n重，200多g拿在手里还是有坠手的感觉。\n镜头凸起，潜望镜头造成镜头凸起还大，握感不是很好。\n系统解锁容易，秒解锁。\n电池5400mah，100w有线充电，50w无线充电，终于不用担心续航了。\nusb3.2，终于可以愉快的传输数据了。\n\n申请深度测试现在有BUG，可以直接秒解，而且从酷安来看，这个BUG已经存在很久了，\n准备工作\n一个新的欢太账号，注意不能是之前注册过的。\n新版的深度测试app，下载地址：[网盘][https://drive.filen.io/d/554aa530-fd46-4f68-bb30-5b692532830b#HD8RjiZQ8SDDpwuJYMJmqgmxUmbXNBE7]\n旧版的深度测试app，下载地址：[网盘][https://drive.filen.io/d/97ea5395-71ac-48e5-89a8-1e49910f5224#v1IwK7ortqQA1cOdgQDhzVU6twPl0K3h]\n\n流程\n安装新版深度测试app并登录新的欢太账号登录后申请测试，会提示让等待。\n卸载新版深度测试app并安装旧版的深度测试app\n打开你就会发现已经通过测试了。\n\n解锁BL\n注意：目前貌似回锁有问题，无法回锁，刷机自行承担后果了。\n\n\n开启开发者模式设置-关于手机-版本信息-点击5次版本号-提示开启开发者模式，设置-其他设置-开发者模式-OEM解锁 打开\n\n安装高通USB驱动\n\n下载安装adb工具 [网盘下载][https://drive.filen.io/d/c78fe85f-11af-4e7c-9ef2-c7a27403fab6#JNdQsCcUgaiWYlga4psBTH8bOWHRSlkn]\n\n深度测试app中重启到fastboot模式\n\nadb工具文件夹中按Shift+鼠标右键 选择在终端打开\n\nusb连接电脑，可以在设备管理器中看是否驱动，然后终端中输入./fastboot.exe devices 会看到一个设备连接\n\n输入./fastbook.exe flashing unlock，手机选择UNLOCK THE BOOTLOADER (音量上下，开机确认)\n\n解锁完成，重启开机。\n利用magisk解锁手机\n\n\n解锁肯定是为了root手机的。\n\n  目前有两种主流方式magisk 和kernelsu ，我还是喜欢magisk来root。  magisk有多种版本，如果你想更好的隐藏root，那红狐狸(magisk德尔塔版本)无疑是最好的选择，注意红狐狸现在改名Kitsune Mask，你可以从github下载安装apk。\n解锁流程\n下载当前版本的全量包，解压出来找到payload.bin\n下载解包工具payload-dumper-go\n输入.\\payload-dumper-go.exe -p init_boot -o .\\boot .\\payload.bin 提取init_boot.img\n把init_boot.img 传输到手机上待用\n打开Kitsune Mask选择Magisk安装 -选择并修补一个文件-找到刚才的init_boot.img 确定\n修补成功会生成magisk_patched-版本_随机.img 一个文件，传输到电脑上。\n重启到fastboot模式\n输入./fastboot.exe flash init_boot magisk_patched-版本_随机.img  提示Sending &#x27;init_boot&#x27; (131072 KB) OKAY [ 3.311s]Writing &#x27;init_boot&#x27; OKAY [ 0.441s]Finished. Total time: 3.794s\n重启手机后打开Kitsune Mask后能开到版本就是成功了。\n后期无法接收到ota更新，只能下载全量包了，重复以上步骤就好了，\n记得备份好init_boot.img 和patch后的init_boot.img 以后有问题可以恢复。\n\nEnjoy!root后不能用微信支付的指纹了，但是支付宝还是可以用的。愉快的玩耍了！\n参考https://magiskcn.com/init-boot-magisk\n","categories":["笔记"],"tags":["realme","root","magisk"]},{"title":"XDR5480开启ipv6防火墙固件","url":"/2024/03/15/XDR5480%E5%BC%80%E5%90%AFipv6%E9%98%B2%E7%81%AB%E5%A2%99%E5%9B%BA%E4%BB%B6/","content":"\nIPV6对于内网环境下的穿透实在是太有必要了。\n\n这是一个泄露的固件[xdr5480mtv1_cn_1_0_39][https://drive.filen.io/d/d4289437-212e-4670-b437-d129dc7232c0#J3tO2z9b8ZYs7qhzMKFc3xsllz1xlWBk]能够看到版本为1.0.39\n升级后的截图可以看到已经有防火墙的开启功能。\n后续的更新可以关注Tp-link无线路由器及网络设备-恩山无线论坛 -  Powered by Discuz!\n","categories":["笔记"],"tags":["xdr5480","tplink","openwrt","ipv6"]},{"title":"aiohttp中session的使用","url":"/2024/03/14/aiohttp%E4%B8%ADsession%E7%9A%84%E4%BD%BF%E7%94%A8/","content":"Session官网介绍的时候推荐采用同一个session做请求，可以自带很多的优势，比如keeplive，cookie等。具体的可以看官网的内容：Advanced Client Usage — aiohttp 3.8.4 documentation\n官网给出的session示例官网示例地址：The aiohttp Request Lifecycle — aiohttp 3.8.4 documentation对于session只有一点需要注意，那就是需要close，可以手动关闭，也可以利用上下文管理的with。\n第一种import aiohttpimport asyncioasync def main():    async with aiohttp.ClientSession() as session:        async with session.get(&#x27;&lt;http://python.org&gt;&#x27;) as response:            html = await response.text()            print(html)loop = asyncio.get_event_loop()loop.run_until_complete(main())\n\n第二种第一种情况可以看到，对于单一的请求是可以的，但是对于多个请求未免有些烦琐，我们看官网给的第二种方式。\nimport aiohttpimport asyncioasync def fetch(session, url):    async with session.get(url) as response:        return await response.text()async def main():    async with aiohttp.ClientSession() as session:        html = await fetch(session, &#x27;&lt;http://python.org&gt;&#x27;)        print(html)loop = asyncio.get_event_loop()loop.run_until_complete(main())\n\n我们可以在main函数中利用创建一个session来完成多次请求。但是我们发现如果把session和我们的类相结合，上面的两种方式就都不是很友好，看github的issue作者是建议用构造函数来完成。\n和项目相结合的方式from aiohttp import ClientResponse, ClientTimeoutfrom aiohttp_retry import RetryClient, ClientSessionclass Request:    def __init__(self, *args, **kwargs):        self.client_session = ClientSession(trust_env=False)        self.retry_client = RetryClient(client_session=self.client_session)        self.request = self.retry_client.request(*args, **kwargs)    async def __aenter__(self) -&gt; ClientResponse:        return await self.request    async def __aexit__(self, exc_type, exc_val, exc_tb):        await self.client_session.close()        await self.retry_client.close()def request(method, url, params=None, headers=None, data=None, json=None):    if headers is None:        headers = &#123;&#125;    if params is None:        params = &#123;&#125;    if json is not None:        return Request(method, url, params=params, headers=headers, ssl=False, json=json,                       timeout=ClientTimeout(total=100))    else:        return Request(method, url, params=params, headers=headers, data=data, ssl=False,                       timeout=ClientTimeout(total=100))\n\n新建一个Request的类，实现__aenter__和__aexit__两个方法，实例化类时新建一个session，请求完毕后关闭。\nEnjoyaiohttp是一个非常好玩的库，可以做client，也可以做server，对于个人项目来说非常的舒服，可以一把梭了。\n","categories":["笔记"],"tags":["aiohttp","session","python"]},{"title":"aiohttp文件上传的几种方式","url":"/2024/03/14/aiohttp%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/","content":"从本地文件上传import asynciofrom aiohttp import ClientSessionfrom aiohttp.formdata import FormDataasync def upload(file_path, file_name):\tasync with ClientSession() as session:\t\tdata = FormData()        data.add_field(            &#x27;file&#x27;,            Path(res_path).open(mode=&quot;rb&quot;),            filename=file_name        )        url = f&#x27;&#x27;        async with session.post( url, data=data) as resp:            assert resp.status == 200asyncio.run(upload(f&#x27;./test.jpeg&#x27;, &#x27;test.jpg&#x27;))\n\n从文件流上传这种方式不需要把文件保存到本地，采用流的方式进行传输。\nimport asynciofrom aiohttp import ClientSessionfrom aiohttp.formdata import FormDataasync def upload_stream(res_url, url, file_name):\tasync with ClientSession() as session:\t\tasync with session.get(res_url) as r:\t\t\tdata = FormData()\t\t\tdata.add_field(&#x27;file&#x27;, r.content, filename=filename)\t\t\tasync with session.post(url, data=data) as resp:\t\t\t\tassert resp.status == 200asyncio.run(upload_stream(f&#x27;&lt;res_url&gt;&#x27;, f&#x27;&lt;upload_url&gt;&#x27;, &#x27;test.jpg&#x27;))\n\nEnjoy!Client Quickstart — aiohttp 3.8.4 documentation\n","categories":["笔记"],"tags":["aiohttp","upload"]},{"title":"半山绿道-恩上湿地公园","url":"//post/ban-shan-lu-dao-en-shang-shi-di-gong-yuan-z7pxa0.html","content":"\n最近迷上了盐田的绿道和公园，打算都去逛一下，这次去的是恩上湿地公园，走的是半山绿道，盐田高级中学南门（空翠台）\n\n恩上湿地公园介绍（AI）恩上湿地公园位于中国，是一个以湿地生态保护和游憩活动为主题的公园。公园内拥有丰富的自然资源和生态系统，吸引了大量的鸟类和其他野生动物。湿地不仅为人们提供了亲近自然的场所，也在水质净化、生物多样性保护等方面发挥着重要作用。\n恩上湿地公园通常设有步道、观鸟台和科普教育设施，为游客提供了了解湿地生态和野生动物的机会。此外，公园内还可能开展各种环境教育活动和生态旅游项目，鼓励公众参与保护湿地环境。\n绿道路线\n线路一：乘坐85路、308路、358路、B924路、E26路、M191路、M199路、M205路公交在盐田区政府公交站或地铁海山站，行走2.4公里到达沙头角林场门口。这条路线都是盘山公路上去，不算是很远，应该可以开车上去的。\n\n线路二：乘坐68路、B925路、B982路、M348路、M444路公交在深圳外国语学校站或地铁深外高中站，行走2.6公里到盐田高级中学前门，这里路线有几条。\n\n盐田高级中学南门（空翠台），这条路从深外上来没有公交车，需要走上来，或者电动车上来，上面没有电动车充电桩，空翠台是看盐田港的一个好地方，同时晚上有夜市。空翠台旁边就是栈道，一直上去就可以。\n盐田高级中学西北门（青云路），这里也没有公交车，不过有电动车的充电桩。这里上山有两条路，一条青云路入口，垃圾站旁边的那条上山路，不太建议走，很远也很陡，也没有人走，所以人迹罕至的。另外一条路是学校门口右手边上山的路，这条路上去和a路线会重合。\na和b中的第二条路，走到上面会重合分岔路，这里选择向上的爬山台阶一直走就到了恩山湿地公园了。\n\n\n路线图 ​​\n\n\n一些风景​​\n​​\n​​\n​​\n​​\n后记这条绿道人迹罕至，自己不建议去，还是建议从海山那边走盘山公路上去。\n","categories":["见闻"],"tags":["绿道","深圳公园","深圳瀑布"]},{"title":"部署自己的网页chatgpt","url":"//post/deploy-your-own-web-page-chatgpt-zixsdg.html","content":"\n之前一直使用NextChat作为自己的Ai前端使用的，但是这个客户端最大的问题是不能同步记录，或者说同步很难用，所以使用自己的服务器部署了自己用也可以分享给朋友使用的LibreChat，它复刻了网页版的ChatGPT，同时新版本也带来了agents的功能来替代插件功能，使其拥有了更加灵活的能力。\n\n部署内容\nLibreChat——一个类似于网页版ChatGPT的web客户端\nNew-Api&#x2F;Uni-Api——中转代理api\n[可选]LibreChat Agents——让LibreChat实现联网搜索\n\nDocker Compose部署LibreChat\n克隆仓库\n\n​$ git clone https://github.com/danny-avila/LibreChat.git &amp;&amp; cd LibreChat​\n\n复制.env​\n\n​$ cp .env.example .env​\n\n(可选)配置.env​\n\n默认LibreChat已经有几种官方的模型，例如openai，Claude，Google等，如果使用的是官方的服务，那么可以不用配置.env​直接启动即可，我自己使用了第三方的api中转，所以需要配置一下环境变量，主要是两个变量OPENAI_API_KEY​和OPENAI_REVERSE_PROXY​注意OPENAI_REVERSE_PROXY​的值需要写到/v1​。\n\n启动\n\n​$ docker compose up -d​\n\n访问http://localhost:3080/​\n\n参考文档：www.librechat.ai/docs/local/docker\nUni-Api因为默认的LibreChat没有国内的大模型代理，配置起来比较麻烦，加上有一些模型没有的api请求地址和openai不同，所以出现了不少二次分发key的代理集合，可以把各家的模型接入到一起使用类openai的方式接入，只需要配置一处，即可以随处使用。我主要使用的有两个：\n\nNew-Api：大而全的集合代理，带有统计系统，适合于运营\nUni-Api：只有集合提供商的功能，没有其他的功能，非常的简介，甚至目前还没有前端，我目前使用的就是这个。\n\n\ncompose.yml文件\n services:  uni-api:    container_name: uniapi    image: yym68686/uni-api:latest    ports:     - &#x27;0.0.0.0:8010:8000&#x27;    volumes:      - ./api.yaml:/home/api.yaml # 如果已经设置 CONFIG_URL，不需要挂载配置文件      - ./uniapi_db:/home/data # 如果不想保存统计数据，不需要挂载该文件夹    restart: always\n\napi.yaml文件 官网有示例，我只配置了中转openai的代理和硅基流动，官方配置详细示例​\n providers:  - provider: api # 服务提供商名称, 如 openai、anthropic、gemini、openrouter，随便取名字，必填    base_url: https://xxxxx/v1/chat/completions # 后端服务的API地址，必填    api: sk-Z1JMOZyECWvAkoPiE49dD221B59xxxxxxxxxxxx # 提供商的API Key，必填    # model: # 选填，如果不配置 model，会自动通过 base_url 和 api 通过 /v1/models 端点获取可用的所有模型。    #   - gpt-4o # 可以使用的模型名称，必填    #   - claude-3-5-sonnet-20240620: claude-3-5-sonnet # 重命名模型，claude-3-5-sonnet-20240620 是服务商的模型名称，claude-3-5-sonnet 是重命名后的名字，可以使用简洁的名字代替原来复杂的名称，选填    #   - dall-e-3    tools: true  - provider: siliconflow    base_url: https://api.siliconflow.cn/v1/chat/completions    api: # 支持多个 API Key，多个 key 自动开启轮训负载均衡，至少一个 key，必填      - sk-jueqfzdklhewxkajbelgtxxxxxxxxxxxxxxxxxxxxxxxxxxx      - sk-sspwxmxmvoksgsqjuefnnxxxxxxxxxxxxxxxxxxxxxxxxxxx    # model:    #   - Qwen/QwQ-32B-Preview    #   - Qwen/Qwen2.5-Coder-32B-Instruct    #   - claude-3-5-sonnet-20240620: claude-3-5-sonnet # 重命名模型，claude-3-5-sonnet-20240620 是服务商的模型名称，claude-3-5-sonnet 是重命名后的名字，可以使用简洁的名字代替原来复杂的名称，选填    # tools: true # 是否支持工具，如生成代码、生成文档等，默认是 true，选填api_keys:  - api: sk-WifWIaIxCvS2dJc_hBQvFxxxxxxxxxxxxxxxxxxxxx # API Key，用户使用本服务需要 API key，必填    model: # 该 API Key 可以使用的模型，必填。默认开启渠道级轮询负载均衡，每次请求模型按照 model 配置的顺序依次请求。与 providers 里面原始的渠道顺序无关。因此你可以设置每个 API key 请求顺序不一样。      - api/* # 可以使用的模型名称，可以使用所有提供商提供的 gpt-4o 模型      - siliconflow/* # 可以使用的模型名称，可以使用所有提供商提供的 claude-3-5-sonnet 模型      # - gemini/* # 可以使用的模型名称，仅可以使用名为 gemini 提供商提供的所有模型，其中 gemini 是 provider 名称，* 代表所有模型    role: adminpreferences: # 全局配置  model_timeout: # 模型超时时间，单位为秒，默认 100 秒，选填    gpt-4o: 10 # 模型 gpt-4o 的超时时间为 10 秒,gpt-4o 是模型名称，当请求 gpt-4o-2024-08-06 等模型时，超时时间也是 10 秒    claude-3-5-sonnet: 10 # 模型 claude-3-5-sonnet 的超时时间为 10 秒，当请求 claude-3-5-sonnet-20240620 等模型时，超时时间也是 10 秒    default: 10 # 模型没有设置超时时间，使用默认的超时时间 10 秒，当请求的不在 model_timeout 里面的模型时，超时时间默认是 10 秒，不设置 default，uni-api 会使用 环境变量 TIMEOUT 设置的默认超时时间，默认超时时间是 100 秒    o1-mini: 30 # 模型 o1-mini 的超时时间为 30 秒，当请求名字是 o1-mini 开头的模型时，超时时间是 30 秒    o1-preview: 100 # 模型 o1-preview 的超时时间为 100 秒，当请求名字是 o1-preview 开头的模型时，超时时间是 100 秒  cooldown_period: 300 # 渠道冷却时间，单位为秒，默认 300 秒，选填。当模型请求失败时，会自动将该渠道排除冷却一段时间，不再请求该渠道，冷却时间结束后，会自动将该模型恢复，直到再次请求失败，会重新冷却。当 cooldown_period 设置为 0 时，不启用冷却机制。  error_triggers: # 错误触发器，当模型返回的消息包含错误触发器中的任意一个字符串时，该渠道会自动返回报错。选填    - The bot&#x27;s usage is covered by the developer    - process this request due to overload or policy\n\n启动 ​$ docker compose up -d​\n\n\n配置LibreChat使用自定义渠道\n添加docker-compose.override.yml​内容如下\n services:  api:    volumes:    - type: bind      source: ./librechat.yaml      target: /app/librechat.yaml\n\n添加librechat.yaml​内容如下，注意备注修改\n version: 1.1.5cache: trueendpoints:  custom:    - name: &quot;Selfapi&quot;      apiKey: &quot;&quot; # 上面填写的api_keys中的api      baseURL: &quot;http://uniapi:8000/v1&quot; # uni-api的地址，如果用docker 桥接模式可以用容器名:端口的形式      models:        default: [&quot;Qwen/QwQ-32B-Preview&quot;, &quot;Qwen/Qwen2.5-Coder-32B-Instruct&quot;, &quot;o1-mini&quot;, &quot;o1-preview&quot;, &quot;gpt-4o-mini&quot;, &quot;gpt-4o&quot;, &quot;claude-3-5-sonnet&quot;, &quot;command-r-plus&quot;]        fetch: true      titleConvo: true      titleModel: &quot;QwQ-32B-Preview&quot;      summarize: false      summaryModel: &quot;QwQ-32B-Preview&quot;      forcePrompt: false      modelDisplayLabel: &quot;Selfapi&quot;      dropParams:        - &quot;stop&quot;        - &quot;user&quot;        - &quot;presence_penalty&quot;        - &quot;frequency_penalty&quot;\n\n参考文档：librechat.yaml配置\n\n重启LibreChat即可\n\n配置Agents使LibreChat支持联网搜索​agents​必然是Librechat的一大杀器，继承于插件，容易配置。\n\n配置.env​启用agents 添加EXPERIMENTAL_AGENTS=true​到.env​文件\n\n申请google search key 申请地址，需要拿到引擎id和json的api key\n\n把google申请的添加到.env​配置文件\n GOOGLE_SEARCH_API_KEY=&quot;&quot; #json api keyGOOGLE_CSE_ID=&quot;&quot; 引擎id\n\n配置agents ​​ ​​​\n\n提供的模型中需要支持函数调用，另外需要搭配一些prompt才好。\n\n\n后记Ai还是需要有一个好的Prompt才好用的。\n","categories":["笔记"],"tags":["uni-app","agents","联网搜索","openwebui","chatgpt","LibreChat"]},{"title":"docker compose中的网络","url":"/2024/03/13/docker%20compose%E4%B8%AD%E7%9A%84%E7%BD%91%E7%BB%9C/","content":"\n一切的问题根源都来自于我用docker compose来启动npm容器，我发现 网上的其他教程都是可以通过docker0网关来访问的，但是docker compose编排的容器每个容器都不在同一个子网，造成docker0网关访问不到，也是自己才疏学浅，实践太少了。\n\ndocker网络中的host和bridge模式想要使用docker，那就必须对docker中的两个基础网络模式有所了解，这样才能知道出错后如何的调试。\nhost模式主机模式 ，docker中如果使用host 模式，那么该容器类似于宿主机直接运行的应用，它不需要配置端口映射，因为它就是宿主机下的应用，使用的端口直接是宿主机上的端口。该模式的优势在于无论是通过宿主机访问容器 、容器访问宿主机 和容器访问容器 都可以通过localhost:port 或者127.0.0.1:port 来直接访问，简单来说host 模式可以认为没有容器网络的概念，同时因为直接访问不需要流量的转发，所以网络上来说是最快的方式。劣势也是非常的明显，那就是宿主机和容器网络之间没有隔离，端口的使用上要注意是否冲突等。没有网络隔离的容器应用还是docker的目的嘛？\nbridge模式NAT模式， docker容器创建时如果未指定网络模式，那么默认就是bridge 模式，创建时会自动创建一个appname_default 的网络。该模式的优势在于宿主机和容器网络是隔离的，通过docker0 网关来相互访问，同时因为使用NAT 那么不同的容器应用网络就可以自由的配置，比如某些应用在一个子网内，另外一些应用在另外一个子网内。劣势在于NAT 需要流量转发，网络性能要差一些，同时宿主机到容器 ，容器到容器 的访问都是比较简单的，但是容器到宿主机 的访问就比较麻烦了。\n两种模式没有绝对的优和差，更多的还是适用的场景不同。\nNPM的两种网络模式配置如果你是用docker 命令行的方式来运行的容器，那么你可以直接用docker0 的网关:端口，如172.17.0.1:prot 来访问其他的容器。如果你是用docker compose 配置文件启动的容器，我相信你会出现和我一样的网络问题，那就是172.13.0.1:port 访问不到其他的容器，同时也无法访问宿主机，这对于npm 是致命的，因为这样以来npm 毫无意义。\nDocker compose下的host 模式使用host 模式是配置npm最简单的方法，如果你运行的容器不多，同时端口也没有冲突，不需要过多的关注细节，那么这种模式是最优的。而需要做的也只是在每个docker-compose.yml 文件中将network_mode: &quot;host&quot; 这一行添加到容器应用中即可。这样一来，你可以直接在npm 配置中的hostname/IP 这一项中填入localhost 或者127.0.0.1 即可访问其他容器以及宿主机应用。\nDocker compose下的bridge模式bridge 模式下有两种配置方式来通信\n\n通过docker命令行来组建内网好处是不需要改动配置文件，坏处是每次停止容器都需要重新将该容器的网络加入到子网中\n创建一个网络 $ docker network create npm\n把其他容器加入到该网络$ docker network connect npm &lt;容器的名字&gt;\n查看npm网络下有哪些容器以及ip $ docker network inspect npm \n可以用容器的名字 互相访问，比如有一个alist 容器加入到网络，可以在npm 容器中用ping alist 来访问。npm中的hostname/IP 也可以用容器的名字\n\n\n通过docker-compose.yml 配置网络例如：npm 的docker-compose.ymlversion: &#x27;3.8&#x27;services:  app:    image: &#x27;jc21/nginx-proxy-manager:latest&#x27;    restart: unless-stopped    networks:\t    - npm    ports:      - &#x27;80:80&#x27;      - &#x27;81:81&#x27;      - &#x27;443:443&#x27;    volumes:      - ./data:/data      - ./letsencrypt:/etc/letsencryptnetworks:\tnpm:\t\tdriver: bridge\nalist 的docker-compose.ymlversion: &#x27;3.3&#x27;services:    alist:        restart: always        volumes:            - &#x27;.data/alist:/opt/alist/data&#x27;        networks:\t        - npm        ports:            - &#x27;5244:5244&#x27;        environment:            - PUID=0            - PGID=0            - UMASK=022        container_name: alist        image: &#x27;xhofe/alist-aria2:latest&#x27;networks:\tnpm:\t\tdriver: bridge\n  如果npm 网络已经通过其他命令创建了，那么可以通过外链的形式version: &#x27;3.8&#x27;services:  app:    image: &#x27;jc21/nginx-proxy-manager:latest&#x27;    restart: unless-stopped    networks:\t    - npm    ports:      - &#x27;80:80&#x27;      - &#x27;81:81&#x27;      - &#x27;443:443&#x27;    volumes:      - ./data:/data      - ./letsencrypt:/etc/letsencryptnetworks:\tnpm:\t\texternal: true\n\nDocker compose下的link 模式我用的不多，参考官方文档吧\nEnjoy!docker很好，只要玩的转。\n参考：[docker network官方文档](Networking in Compose | Docker Docs)\n","categories":["笔记"],"tags":["docker","docker-compose","network"]},{"title":"国庆假期的游山玩水","url":"//post/guo-qing-jia-qi-de-you-shan-wan-shui-zqyp0e.html","content":"\n9月底出去玩了一周，国庆5天长假本打算回家，老妈也没在家，就没出深圳了，刚好很久没有爬山了，安排一下，没想到好久不动的代价就是爬山爬到要咬牙上呀。\n\n7号梧桐绿道徒步8号计划爬梧桐山，想着很久没动了，先活动一下筋骨，没想到却成了阻碍。\n梧桐绿道是深圳绿道5号线的一部分，从罗湖果林场到左副坝防洪公路的一段绿道，长度约4.5公里，沿着深圳水库的一条绿道，大部分地方都有树荫遮挡，属于行人和自行车绿道，电动车不能进去，也是我经常去步行和骑车的一条绿道，来回约9公里，中间停留仙湖驿站。\n​​\n中间会路过仙湖植物园的一个门，听路人说下午6点的时候可以免费进去的，我没有试过。\n虽然这个徒步没有难度，但是我低估了自己的腿脚了，走完后回来就觉得大腿酸痛，哎。\n8号梧桐山经典路线北大门进，泰山涧上行转好汉坡平台到梧桐山顶，最后走盘山公路下山。\n10月的天气正式爬山的好天气，天气不热很凉爽，加上过了国庆的假期，所以人不多，爬起来还是舒爽的。不过我个人很久不爬了，体力是真的步行，在泰山涧的第二个平台就有点吃力了，一路上休息了多次才到好汉坡平台，好汉坡的下半段完全是凭着一口气硬上去的，主要就是大腿酸痛，每走一步就有点疼，以后还是多加强锻炼了。\n​​\n回来后第二天整整在家休息了1天，大腿还是酸痛没什么缓解。\n10号马峦山瀑布9号休息了1天，答应了同事去马峦山瀑布看看，感觉走平路问题不大，所以10号前往了马峦山瀑布，因为知道自己肯定是走不下来全程的，所以这次主要就是去看瀑布的，没想过爬山，所以直接从北门上。\n路线：14号线石芽岭地铁站——锦龙地铁站，滴滴到马峦山园区总站​或者马峦山北门​，千万不能定位错了去了西北门，那就要翻山10多公里才能看到马峦山瀑布了。\n北门​​\n进去后一直沿路上去，大约3公里，出现岔路，往右上的盘山公路继续大约1公里就到了深圳瀑布的入口了，有提示，小路下去就到了。\n轨迹​​\n瀑布​​\n总结这个国庆虽然没出去玩，但是运动让我痛苦并快乐着。\n","categories":["见闻"],"tags":["深圳","梧桐山","瀑布","马峦山"]},{"title":"Haproxy同时在443端口上使用tcp和http协议","url":"//post/haproxy-uses-tcp-and-http-protocols-on-port-443-jhkgj.html","content":"\n最近发现同时在443上监听tcp和http协议会有ssl握手的问题，具体表现就是需要握手失败3次才能正确的sni转发。\n\n前情提要之前写过一篇利用haproxy复用443端口同时使用tcp和http协议，在配置中实现了tcp和http协议利用sni分流同时监听在443的端口，但是这样会造成一定的问题，就是谁先谁后的问题，经常需要握手几次失败之后才能正确的识别到。\n故重新配置了一下配置文件，实现了全部由tcp443进站，然后利用sni分流给后端，利用tcp或者sock文件转成http协议。\n配置文件global    log /dev/log local0    log /dev/log local1 notice    user haproxy    group haproxy    unix-bind user haproxy    unix-bind group haproxy    unix-bind mode 660    chroot /var/lib/haproxy    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners    stats timeout 30s    daemon    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-ticketsdefaults    log global    mode tcp    option tcplog    option dontlognull    timeout connect 24h    timeout client 24h    timeout server 24h# http转httpsfrontend http_in    mode http    bind *:80    http-request redirect scheme https# 配置http入站frontend https_in    # export DEPLOY_HAPROXY_PEM_PATH=/usr/local/etc/haproxy/cert/    # export DEPLOY_HAPROXY_RELOAD=&quot;/bin/systemctl restart haproxy&quot;    # acme.sh --deploy -d &lt;domain&gt; --deploy-hook haproxy    mode http    # bind *:443 ssl crt /usr/local/etc/haproxy/cert alpn h2,http/1.1    bind 127.0.0.1:9443 ssl crt /usr/local/etc/haproxy/cert alpn h2,http/1.1 accept-proxy    # 配置日志    option httplog    log-format &quot;%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %&#123;+Q&#125;r&quot;    # 捕获更多请求信息    capture request header Host len 40    capture request header User-Agent len 100    capture request header X-Forwarded-For len 15    # 处理web流量转发给后端    acl host_blog hdr(host) -i xx.xx.xx    acl host_webdav hdr(host) -i xx.xx.xx    acl host_s3 hdr(host) -i xx.xx.xx    use_backend webdav_backend if host_webdav    use_backend s3_backend if host_s3    use_backend blog_backend if host_blog    default_backend default_backend#配置tcp入站，主要复用443端口frontend tcp_in    mode tcp    bind *:443    tcp-request inspect-delay 5s    tcp-request content accept if &#123; req.ssl_hello_type 1 &#125;      # 域名匹配规则    ## 1. ssl透传    acl host_app req_ssl_sni -m sub zxxx    ## 2. 复用443 tcp代理    acl host_trojan req_ssl_sni -i xxx    acl host_vless req_ssl_sni -i xxxx    # 1. ssl穿透，由后端服务器负责处理ssl，负载均衡服务器只负责加密转发，适合原域名转发的情况    use_backend forward_backend if host_app    # 2. tcp 转发后端处理    use_backend trojan_backend if host_trojan     use_backend vless_backend if host_vless    default_backend tcp_to_https# TCP 后端解密 HTTPSbackend tcp_to_https    mode tcp    server local-https 127.0.0.1:9443 send-proxy-v2     timeout connect 5s    timeout server 30sbackend webdav_backend    mode http    server filen_webdav 127.0.0.1:8190 checkbackend s3_backend    mode http    server filen_s3 127.0.0.1:8191 check# web后端，sni转发到其他服务器backend blog_backend    mode http    option forwardfor    option http-server-close      # 保持客户端真实IP    http-request set-header X-Forwarded-For %[src]    http-request set-header X-Real-IP %[src]    http-request set-header Host xxxx      # 转发到远程nginx服务器    server nginx_server xxxxxx ssl check verify none check-sni blog.zdawn.net sni str(blog.zdawn.net) inter 2000 rise 2 fall 4# ssl穿透backend forward_backend    mode tcp    #balance roundrobin    option ssl-hello-chk    server blog_server 2xxxxx weight 1 check inter 2000 rise 2 fall 4# Trojan 后端配置backend trojan_backend    mode tcp    server trojan_server 127.0.0.1:9000 checkbackend vless_backend    mode tcp    server vless_server 127.0.0.1:9010 check# 默认后端backend default_backend    mode http    http-request den\n\n后记利用sock的方式我一直有权限的问题，故更换了tcp的方式，这种方式更加的稳定一些。\n现在就可以愉快的玩耍了。\n","categories":["笔记"],"tags":["haproxy","sni","sing-box"]},{"title":"mihomo搭配adguard home的组合","url":"//post/mihomo-combined-with-adguard-home-1wi3ok.html","content":"mihomo搭配adguard home的组合\nmihomo虽然自带了去广告，但是效果一直比较一般，尝试一下用adg过滤广告，用mihomo来分流。\n\n拓扑\nmihomo劫持局域网dns，adg做dns上游，这种情况fake-ip的意义不大，你需要一个无污染的doh，dns解析全由这个doh负责\n\nadg劫持dns，mihomo做dns上游，我用的是这种情况。\n\nadg只用来去广告和dns重新\nmihomo的fake-ip分流来处理dns\n\n\n\n配置\n关闭Openwrt Dnsmasq劫持dns功能 openwrt 默认使用dnsmasq来劫持局域网53端口，我们需要关闭dnsmasq或者给它换个其他的端口。\n 网络-&gt;dhcp&#x2F;dns-&gt;设置及端口-&gt;修改dns服务器端口 ​​\n\n启用adguard home劫持53端口\n dns:  bind_hosts:    - 192.168.0.2  port: 53\n\n配置adg dns上游为127.0.0.1:1053​\n 这个地址为mihomo的dns监听端口\n\n配置mihomo的监听端口为1053\n dns:  enable: true  listen: 0.0.0.0:1053\n\n重启即可\n\n\n后记这样配置最大的问题还是dns泄露的问题，不过也不做什么。\n","categories":["笔记"],"tags":["mihomo","MTP","adg"]},{"title":"我的旁路由网关OPENWRT配置和常用服务","url":"//post/my-bypass-gateway-openwrt-configuration-and-common-service-z26ifkr.html","content":"我的旁路由网关OPENWRT配置和常用服务\n我用N1做旁路由网关蛮久的了，做个备份常用的功能和服务配置。\n\nN1做旁路由的配置参考家庭网络拓扑-N1旁路由 | Dawnz Blog (zjan.me)\n启用IPV6组网用于内网穿透硬件网络：中国联通，IPV4-NAT1，公网IPV6\n主路由：TP-Link xdr 5480，固件为可以关闭防火墙的ipv6的固件，XDR5480开启ipv6防火墙固件 | Dawnz Blog (zjan.me)\n旁路由：斐讯N1\n主路由开启ipv6\n配置开启 ​​\n配置关闭防火墙 ​​\n配置局域网设置 ​​\n\n旁路由OPENWRT配置\n配置ipv6接口 ​网络​-&gt;接口​-&gt;添加新接口​-名字任意（lan6）-协议为dhcpv6​-接口@lan​-防火墙lan​-&gt;保存并应用 ​​\n\n配置防火墙规则 不知道为什么我的默认规则可以让所有IPV6入站，这很不安全，我们应该是让特定的端口入站，同时拒绝ipv6流量入站。\n\n允许51820/udp​协议入站（wg端口）​​\n拒绝所有IPV6入站​​\n\n\nipv6 旁路由的问题 我的ipv6主要就是用于内网穿透的，并不需要代理，旁路由的ipv6流量代理是有问题的，因为大多数设备不支持自定义ipv6网关和dns\n\n\n配置服务——动态域名DDNS-GON1配置ddns-go的包为：luci-app-ddns-go\nN1需要下载Releases中的3个包\n\nddns-go_6.7.0-1_aarch64_generic.ipk\nluci-app-ddns-go_1.4.5_all.ipk\nluci-i18n-ddns-go-zh-cn_git-24.100.44971-c6c0236_all.ipk\n\n我的域名托管于cloudflare，所以直接使用了cf，简单配置如下\n\n创建个人token\n\nipv4 不启用\n\nipv6启用-&gt;通过网卡获取-@1- ​​\n\nWebhook ​telegram-bot​ ​Url​：https://api.telegram.org/bot&#x2F;sendmessage ​Body​:\n &#123;  &quot;chat_id&quot;: &quot;&lt;chat_id&gt;&quot;,  &quot;text&quot;: &quot;新的 IPv6 地址: #&#123;ipv6Addr&#125;\\n影响域名: #&#123;ipv6Domains&#125;\\n更新结果: #&#123;ipv6Result&#125;&quot;&#125;\n\n配置服务——MihomoTproxy\nOnly support firewall4, it means your OpenWrt version needs to be 22.03 or above\n\n项目地址：OpenWrt-mihomo\n安装和更新：curl -s -L https://mirror.ghproxy.com/https://raw.githubusercontent.com/morytyann/OpenWrt-mihomo/main/install.sh | ash​\n卸载：curl -s -L https://mirror.ghproxy.com/https://raw.githubusercontent.com/morytyann/OpenWrt-mihomo/main/uninstall.sh | ash​\n配置服务——wireguard网络-&gt;接口-&gt;添加接口-&gt;名称：wg0，协议：wireguard\n\n配置 密钥：生成密钥对 监听端口：默认即可或者改一下，如果改了记得防火墙放行端口\n IP地址：10.0.0.1&#x2F;24 (不能和局域网的网段相同) ​​\n\n防火墙设置lan​\n\n添加对端 生成配置用移动端扫描一下二维码添加通道 ​​\n\n保存后应用，重启一下wg0​的接口 注意每次添加、修改、删除peer，都需要重启接口。\n\n移动端配置 移动端需要修改一下配置，把对端配置改为[ipv6地址]:port​\n\n\n后记配置了很久，旁路由没有想象中的那么好用，以后自己在家还是用主路由配置为好。\n‍\n","categories":["笔记"],"tags":["openwrt","mihomo","N1","旁路由","wireguard","tproxy"]},{"title":"openwrt uhttpd更换caddy的备忘","url":"//post/openwrt-uhttpd-memo-to-replace-caddy-hlfca.html","content":"openwrt uhttpd更换caddy的备忘\nopenwrt的web服务是uhttpd这个轻量级的反代提供的，能提供的功能太弱了，如果使用性能比较强的cpu，以及内存比较大，可以更换为其他的反代，例如nginx，caddy，haproxy等，本文主要记录一下更换caddy的过程。\n\n文章内容均来自：https://www.dolingou.com/article/openwrt-caddy-homelab-reverse-proxy，本文主要是记录备忘。\n安装带有php支持的Caddy默认的官网版本或者源中的caddy都是不带php支持的，无法使用，我们直接下载支持的版本即可。\nhttps://caddyserver.com/download 打开链接后选择对的系统平台和cpu架构，搜索aksdb/caddy-cgi/v2​，勾选上直接下载即可。\n​​\n\n我的设备是N1，也可以直接用命令行下载。\n\n​$ curl -O https://caddyserver.com/api/download?os=linux&amp;arch=arm64&amp;p=github.com%2Faksdb%2Fcaddy-cgi%2Fv2&amp;idempotency=73058696755620​\n\n重命名后给与可执行权限并移动到/usr/bin​\n\n$ mv caddy_linux_amd64_custom caddy$ sudo chmod +x caddy$ sudo mv caddy /usr/bin \n\n配置Caddyfile​ 文件\n配置文件在/etc/caddy/Caddyfile​，没有就自己新建一个文件即可 ​$ sudo vim /etc/caddy/Caddyfile​\n\n添加如下内容，具体的文件意义可以看原文\n &#123;\torder cgi before respond\torder file_server last\t# skip_install_trust\t# auto_https disable_redirects\t# default_sni openwrt.local&#125;(luci) &#123;\troot * /www\troute /cgi-bin* &#123;\t\t@exists &#123;\t\t\tfile cgi-bin/&#123;path.1&#125; =404\t\t&#125;\t\thandle @exists &#123;\t\t\turi strip_prefix &#123;file_match.relative&#125;\t\t\tcgi * /www/&#123;file_match.relative&#125; &#123;\t\t\t\tscript_name &#123;file_match.relative&#125;\t\t\t&#125;\t\t&#125;\t&#125;\tcgi /ubus* ubus.sh &#123;\t\tscript_name /ubus\t&#125;\tfile_server\tredir / /cgi-bin/luci&#125;http:// &#123;\timport luci&#125;\n\n下载ubus.sh​并进行配置# 下载ubus脚本$ curl -O https://raw.githubusercontent.com/yurt-page/cgi-ubus/master/ubus.sh# 复制到/etc/caddy和/www/cgi-bin$ sudo chmod +x ubus.sh$ sudo cp ubus.sh /etc/caddy$ sudo cp ubus.sh /www/cgi-bin# uci设置$ sudo uci set luci.main.ubuspath=&#x27;/cgi-bin/ubus.sh&#x27;$ sudo uci commit\n\n关闭uhttpd$ sudo /etc/init.d/uhttpd disable$ sudo /etc/init.d/uhttpd stop\n\n配置caddy启动脚本\n在&#x2F;etc&#x2F;init.d 下新建一个caddy的文件，复制粘贴如下内容\n\n#!/bin/sh /etc/rc.commonSTART=99SERVICE_USE_PID=1SERVICE_WRITE_PID=1SERVICE_DAEMONIZE=1start() &#123;       service_start  /usr/bin/caddy run --config /etc/caddy/Caddyfile&#125;stop() &#123;        service_stop /usr/bin/caddy&#125;\n\n\n赋予可执行权限\n\n​$ sudo chmod +x /etc/init.d/caddy​\n\n启动caddy并配置开机自启动\n $ sudo /etc/init.d/caddy start$ sudo /etc/init.d/caddy enable\n\n配置caddy反向代理使用通配占位符没有成功，还在研究之中。\n总结主要是内网有https的需求，以及反向代理的易用性。\n","categories":["笔记"],"tags":["opnewrt","caddy","uhttpd"]},{"title":"openwrt使用tproxy做透明代理的小问题","url":"//post/openwrt-uses-tproxy-to-do-a-small-problem-for-transparent-proxy-1v43cl.html","content":"openwrt使用tproxy做透明代理的小问题\n最近在使用openwrt-mihomo插件时遇到了一个问题，使用tun和rediect都可以做透明代理，但是tproxy模式局域网内的设备无法代理。\n\n现象\n使用tun和rediect模式都可以透明代理局域网设备\ntproxy无法代理局域网设备，可以代理路由器本身\n使用tproxy模式局域网可以利用socks5连接\n使用tproxy模式局域网设备无法联网，利用socks5代理可以联网\n\n尝试\nopenwrt-mihomo插件使用的是firewall4防火墙，故删除了firewall3所有的规则\n删除了自带的dockerman\n删除了tailscaled\n更新到最新版\n更换shellcrash使用mihomo和singbox内核的tproxy模式\n等等\n\n问题所在经过和群里小伙伴的不懈努力，尝试了各种方案，最终尝试将旁路由的lan口名字由br-lan​改为etho​解决问题，可以正常代理tcp​和udp​\n修改network​配置文件\n备份network​配置文件 ​# cp /etc/config/network /etc/config/network.bak\n\n删除device​块\n # 这个块删除或注释掉config device\toption name &#x27;br-lan&#x27;\toption type &#x27;bridge&#x27;\tlist ports &#x27;eth0&#x27;\n\n修改lan​块接口的配置\n ## 只要改动 option device &#x27;eth0&#x27;即可config interface &#x27;lan&#x27;        option device &#x27;eth0&#x27;        option proto &#x27;static&#x27;        option ipaddr &#x27;192.168.0.2&#x27;        option netmask &#x27;255.255.255.0&#x27;        option ip6assign &#x27;64&#x27;        option gateway &#x27;192.168.0.1&#x27;        list dns &#x27;192.168.0.1&#x27;\n\n重启网络服务 ​# /etc/init.d/network restart​\n\n\n后记其实在使用openwrt-mihome和shellcrash都无法使用tproxy模式的时候就感觉和固件有关系，一直在修改防火墙，没想到问题出现在这里。没有看tproxy的启动脚本，难道说br-lan​的名字是无法拦截吗？\n‍\n","categories":["笔记"],"tags":["openwrt","tproxy","局域网透明代理"]},{"title":"ssh配置不同key以便于访问不同帐号","url":"/2024/03/15/ssh%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%90%8Ckey%E4%BB%A5%E4%BE%BF%E4%BA%8E%E8%AE%BF%E9%97%AE%E4%B8%8D%E5%90%8C%E5%B8%90%E5%8F%B7/","content":"目标3个帐号对应3个key，同时使用。\n\nGithub-senlief - senlief.github\nGithub-janzbff - janzbff.github\nGitlab-moqi - moqi.gitlab\n\n生成需要3个密钥对ssh-keygen -t ecdsa -f ~/.ssh/senlief.githubssh-keygen -t ecdsa -f ~/.ssh/janzbff.githubssh-keygen -t ecdsa -f ~/.ssh/moqi.gitlab\n\n在对应网站和帐号设置3个公共密钥cat ~/.ssh/senlief.github.pubcat ~/.ssh/janzbff.github.pubcat ~/.ssh/moqi.gitlab.pub\n\n设置 config 文件# 编辑config文件没有就新建一个$ vim ~/.ssh/config\n\n示例如下# senlief.githubHost  senlief.github HostName github.com PreferredAuthentications publickey IdentityFile ~/.ssh/senlief.github# janzbff.githubHost janzbff.github HostName github.com PreferredAuthentications publickey IdentityFile ~/.ssh/janzbff.github# moqi.gitlabHost moqi.gitlab HostName gitlab.com PreferredAuthentications publickey IdentityFile ~/.ssh/moqi.github\n\n测试# 用Host代替Hostname$ ssh -T git@senlief.github$ ssh -T git@janzbff.github$ ssh -T git@moqi.gitlab\n\nEnjoyclone 只需要把git地址中的Hostname替换为Host即可。\n","categories":["笔记"],"tags":["ssh","github"]},{"title":"2024 年 4 月香港银行卡开户总结（转载）","url":"//post/summary-of-hong-kong-bank-card-opening-in-april-2024-v2ex-z2uyen.html","content":"2024 年 4 月香港银行卡开户总结 - V2EX\n原文地址 https://v2ex.com/t/1030463#reply137，转载备份。\n\n📽️说说我的经历：开了 6 张卡，一天内开了 5 张，实际还挺累的。但是这些只是我的经历。➡️ 中银香港➡️ 香港汇丰➡️ 工银亚洲➡️ 招商永隆➡️ 南洋商业银行➡️ 恒生银行\n☎️准备➡️ 3 月就关注好了香港公众假期，各家银行营业时间，确定了清明 8 天假期，4 月 2 号办理、4 月 3 号补漏。➡️ 提前预约，除了汇丰提前一周预约没有约上，其它几家银行我每家都有预约或者申请，每家办理都很丝滑。➡️ 提前做好了功课，预约了相互临近的分行。除了工银亚洲我预约的远一些，其它几家都是相互步行最多 10 分钟以内就到的。我每家分行都提前在 Google 地图上标记收藏了地点，预估了银行之间的线路，在 Notes 上记录了分行名称、地址、预约时间，提前做好了规划。➡️ 提前下载好了各家银行 APP 。\n💵换汇➡️ 国内换汇了 31,500 港币，其中 500 作为消费零钱用，其余开户存入银行。\n📜相关文件➡️ 地址证明、过去半年工资行流水、过去半年纳税记录文件我每一样彩印了 6 份、对应 6 家银行。\n\n中银香港中银香港，荃湾分行，预约的 4 月 2 日 09:00 。无排队等待，43 分钟开户完成，现场拿提款卡。\n📜我准备的材料：✅ 身份证✅ 港澳通行证✅ 过境小票 (小白条)✅ 3 月份的招行信用卡账单 (掌上生活 - 账单补寄 - 公章电子版，彩印)✅ 过去 6 个月的代发工资行流水 (银行 APP 申请电子版，彩印)✅ 过去 6 个月纳税记录 (个人所得税 APP 申请电子版，彩印)\n📽️开户过程➡️ 早上 8 点半到银行门口排队，前边已经有 3 个老大爷在排队了。9 点银行开门，跟着队伍进去，直接跟大堂经理说我预约了开户，给她看了预约邮件，她说 9 点可以你是第一个，问我有没有带 1000 港币、开户完成需要存入，我说带了，然后让我先下载 BOC 香港扫码填写资料，带我去坐门口的小桌那，让我填完找她。BOC 香港和 BOC Pay 我已经提前下载好了。➡️ 就是填写一些个人信息，填写完成找到大堂经理，带我去了旁边的小隔间，接待的理财经理是一个小哥，普通话很好。我直接把老三样和账单、流水、纳税记录给他了。小哥看了一下证件和文件，问开户目的，答投资理财；问有无投资经验，答买过基金和银行理财产品；问需要开通投资账户吗，答需要。➡️ 接下来就是小哥操作，复印证件、在电脑录入信息，有另外一位经理来核对了下我的证件然后签字盖章，引导我在他电脑上填一下投资风险问卷，最后跟我核对了一下电脑上录入的信息，确认之后小哥说稍等他去拿张提款卡。➡️ 一会拿着提款卡回来了，闲聊了几句问我什么时候来的香港、什么时候回去。小哥又在电脑上操作，结束之后跟我说了一些告知事项，给了三本条款小册子，引导我开通了 BOC Pay ，让我离开香港前去自助取款机插卡查询余额激活一下提款卡。➡️ 到此结束，去外边自助存款机存了 1000 港币。\n❗补充说明1️⃣ 中银预约是可以预约 7 天后的第一个工作日或者周六营业日，0 点 5 分之前各预约时段基本都有位置。我 3 月 21 号就预约到了 4 月 2 号。2️⃣ 中银香港荃湾分行无预约不给开户。我开户期间遇到 3 个人来问没有预约能否开户都被拒绝了。\n\n香港汇丰香港汇丰，荃湾分行，4 月 2 日 walk-in 开户。排队等待 1 小时 40 分钟左右，40 分钟开户完成，同步申请 Red 信用卡，现场拿提款卡\n📜我准备的材料：✅ 身份证✅ 港澳通行证✅ 过境小票 (小白条)✅ 3 月份的招行信用卡账单 (掌上生活 - 账单补寄 - 公章电子版，彩印)✅ 过去 6 个月的代发工资行流水 (银行 APP 申请电子版，彩印)✅ 过去 6 个月纳税记录 (个人所得税 APP 申请电子版，彩印)\n📽️开户过程➡️ 在中银香港开户完存完钱立刻去了汇丰荃湾分行，步行 10 分钟到达，无预约取号，前面等候 30 个人。先等了半个小时只过了 1 个号，于是先步行 8 分钟去招商永隆取号，招商永隆取号后要等候 5 个人，决定先在招商永隆等，等了 1 个多小时仅过了 2 个号，与此同时扫描汇丰号码条二维码查看叫号进度已经叫到 38 号，决定先回汇丰，等 10 分钟步行回去，已经过号 2 个了，此时一对老夫妇办业务很快完成了，我于是打断理财经理小姐姐叫号，说我刚才接电话过号了，能否让我先办，小姐姐说可以，小姐姐普通话很好。➡️ 同样我直接把老三样和账单、流水、纳税记录给小姐姐，小姐姐看了一下证件和文件，问开户目的，答投资理财；问有无投资经验，答买过基金和银行理财产品；问让我看下投资记录，我给她看了银行的理财产品，小姐姐说可以。➡️ 接下来就是小姐姐用我手机在汇丰香港 APP 填写申请，复印证件什么的，中间只让我填写了邮箱、详细地址的拼音、公司名称，填写完再下一步之前我都给小姐姐看了一下确认。问我有带港币现金存款吗，我说带了 10000 港币要存，并问小姐姐能否申请信用卡，小姐姐说可以、是申请免年费那个吗，我说是，她说稍等在 APP 上申请，先去拿个提款卡。➡️ 一会小姐姐拿卡回来，确认一些信息盖章签字，小姐姐说签字可以简体、繁体、拼音、英文，但是包括以后所有签字都要用同一份。用我手机在汇丰 APP 申请了信用卡，完成后说信用卡通过后会寄到我的通讯地址，信件到大概 1 个月左右，然后给我提款卡说去旁边自助存款机存款、提款机改密码，不会的可以问我的同事。➡️ 到此结束，去旁边自助存款机存了 10000 港币，然后在提款机修改了提款卡密码。\n❗️补充说明1️⃣ walk-in 的叫号和预约叫号是不一样的号码，我在等待期间发现预约的号码叫号是比较快的，虽然 walk-in 的号码有很多并不是办理开户，业务办理快慢很难判断。我是提前一周没有预约到，所以直接 walk-in 。\n\n工银亚洲工银亚洲，葵芳分行，预约 4 月 2 日 12:00 - 13:00 开户。无排队等待，45 分钟开户完成，20 分钟排队存款，现在未拿提款卡、卡邮寄。等待提款卡邮寄中。\n📜我准备的材料：✅ 身份证✅ 港澳通行证✅ 未用到⭕️ 过境小票 (小白条)✅ 未用到⭕️ 3 月份的招行信用卡账单 (掌上生活 - 账单补寄 - 公章电子版，彩印)✅ 未用到⭕️ 过去 6 个月的代发工资行流水 (银行 APP 申请电子版，彩印)✅ 未用到⭕️ 过去 6 个月纳税记录 (个人所得税 APP 申请电子版，彩印)\n📽️开户过程➡️ 在汇丰香港开完户已经接近 12 点半了，估计招商永隆已经过号了，工银亚洲的预约时间也到了，就直奔葵芳先办工银亚洲。需要坐两站地铁，这家分行位置不好找，在葵涌广场 2 楼，里面全是小商铺，我到了 2 楼后，转了 5 分钟才找到，已经过了 13:00 了。➡️ 到达之后大堂没有工作人员，保安也不在，只有一个窗口在排队办业务。我于是问门口隔间的小哥说我预约了开户，小哥问我时间，我说 12:00 - 13:00 ；问我名字，我说完他查了一下；问我预约编号是多少，我说完他查了一下说请坐，小哥的普通也很好。➡️ 同样我直接把老三样和账单、流水、纳税记录给小哥，但是小哥只要了身份证和港澳通行证。问我开户目的是什么，答投资理财；问我收入来源是什么，答主要是工作收入，这里理解岔了，小哥说不是这意思喔是你的资金是怎么香港，答主要是电汇，问是否需要开通网银和提款卡，答需要，小哥说需要存 10000 港币，我说带了港币现金。小哥给我他的名片，要我把地址信息发到他名片上的邮箱里，我提前准备了通讯地址、住宅地址、公司信息的简体中文、繁体中文、英文、拼音，所以直接复制就发过去了。然后就是小哥操作，复印证件、盖章签字，有另外一位经理来核对了下我的证件然后签字盖章，中间在小哥电脑上确认了下填写的信息是否正确，确认无误后小哥说等一下我去拿密码纸。➡️ 一会小哥回来把密码纸给我，说提款卡会邮寄到通讯地址，拿到提款卡后在内地工商银行的提款机上激活就可以了。并打印了一张账号明细信息，跟我说可以先拿着账号去存钱，因为现在人比较多，一会还需要再签几个字，于是我拿着账号纸去排队存款，排了 20 分钟才存上，排队的时候小哥已经拿文件过来给我签字了。存款完成我回到小哥那登录工银亚洲 APP 修改密码做了一些设置。➡️ 到此结束。\n❗️补充说明1️⃣ 我预约了不同时段的 4 家分行，只有 1 家分行打电话过来说他们分行已经预约到 7 月份了只好取消。2️⃣ 最初在官网预约提交后提示 “系统维护中，请稍后重试”，重新填写，所有选填项一律不填、地址信息精简，这样提交就可以成功了。原因是提交接口是将表单加密后拼接到请求地址、表单内容过多会导致接口请求 414 。 3️⃣ 葵芳分行比较难找，在葵涌广场 2 层的一个商铺，注意葵涌广场是英式标准 G 层 &#x2F; 1 层 &#x2F; 2 层，2 层对应内地的 3 层，进入后上 3 次扶梯。\n\n招商永隆招商永隆，荃湾分行，3 月份已经在 APP 提交了申请，通过，只待去分行激活，无需再预约分行和时间。4 月 2 日，排队等待 1 小时 10 分钟左右，20 分钟激活完成，现在未拿提款卡、卡邮寄。等待提款卡邮寄中。\n📜我准备的材料：✅ 身份证✅ 港澳通行证✅ 过境小票 (小白条)✅ 未用到⭕️ 3 月份的招行信用卡账单 (掌上生活 - 账单补寄 - 公章电子版，彩印)✅ 未用到⭕️ 过去 6 个月的代发工资行流水 (银行 APP 申请电子版，彩印)✅ 未用到⭕️ 过去 6 个月纳税记录 (个人所得税 APP 申请电子版，彩印)\n📽️开户过程➡️ 在工银亚洲开户完之后，坐地铁回来分行已经 3 点 10 分左右了，这家分行只有 2 个隔间，我中午取的号已经过了很多，正巧小姐姐刚办完 1 个，我就探头问了下我能办吗，小姐姐说你已经过号很久了，需要重新叫号，于是我重新取号，号码为 G (看注意事项 2)，前面排 8 个人。另外 1 个隔间的小哥已经休息了，所以只剩 1 个隔间，小姐姐的普通话很好。➡️ 排队等候到号开始办理，同样我直接把老三样和账单、流水、纳税记录给小姐姐，小姐姐只要了老三样，问开户目的是什么，答投资理财；问月收入多少，答如实；问将来会有多少资金注入，答每半年会有 5w 人民币等值港币进来；问有带港币现金吗，答带了 10000 港币在激活完成后存入。接下来就是小姐姐复印证件、跟我核对信息、盖章签字。最后小姐姐说激活完成了，提款卡会需要一个月左右邮寄到通信地址，柜台存款人比较多，建议去外边自助机存款。外面只有一个自助机，还排队，于是我先去南洋商业银行开户回来再存款，没有排队，直接存入 10000 港币。➡️ 到此结束。\n❗️补充说明1️⃣ 我是 3 月份就在招商永隆 APP 提交申请并审批通过。我在排队等候期间有 5 位因为没有提前申请，被小姐姐拒绝开户。2️⃣ 取号机上有提示，荃湾分行的 G&#x2F;H&#x2F;I 开头号码都是开户相关的，叫号的时候都会叫，我不确定顺序，但基本是 G H I 轮流叫。所以后面跟开户相关的每个号码我都取了一张。3️⃣ 我在 3 点 40 左右排队等候的时候小姐姐和引导的工作人员已经开始自己取号了，把后面时间点的号取掉了，再之后的号码当天办理不了了。\n\n南洋商业银行南洋商业银行，荃湾分行，提前在 APP 提交了申请，通过，只待去分行认证，预约荃湾分行 4 月 2 日 15:00 - 17:00 。排队等待 1 小时左右，15 分钟认证完成，现在未拿提款卡、卡邮寄。等待提款卡邮寄中。\n📜我准备的材料：✅ 身份证✅ 港澳通行证✅ 未用到⭕️ 过境小票 (小白条)✅ 未用到⭕️ 3 月份的招行信用卡账单 (掌上生活 - 账单补寄 - 公章电子版，彩印)✅ 未用到⭕️ 过去 6 个月的代发工资行流水 (银行 APP 申请电子版，彩印)✅ 未用到⭕️ 过去 6 个月纳税记录 (个人所得税 APP 申请电子版，彩印)\n📽️开户过程➡️ 在招商永隆开户完之后，步行不到 2 分钟到达分行。我到的时候没有保安，没有大堂经理。隔间里的经理都在打电话或者有客户，于是我看了取号机。取号机上有开户分行认证的号 (看注意事项 2)，于是取号等待。账户业务只有一个小哥在，有一个大妈办了 50 分钟，我前边 1 个号的大妈早就已经急了，坐立不安，找别的经理说。我也找了一个女经理，让我等待叫号就可以。小哥的普通话很好。➡️ 排队等候到号开始办理，同样我直接把老三样和账单、流水、纳税记录给小哥，小哥只要了身份证和通行证，要我打开南商 e+ APP 给他，接下来就是小哥复印证件、在我手机 APP 上进行分行认证流程、盖章签字，然后说等一下去拿密码纸，2 3 分钟就回来了，跟我说了分行只能做认证，最终结果还需要几个工作日审批，审评通过后提款卡会在一个月左右寄到通讯地址，收卡后在内地南洋商业银行自助机激活就可以。➡️ 到此结束。离港前已收到短信和邮件审批通过。\n❗️补充说明1️⃣ 我是先在南商 e+ APP 上申请，只需要去分行认证然后等待审批。2️⃣ 取号机上有提示，荃湾分行的 C&#x2F;F 开头号码都是户口相关的，叫号的时候都会叫，我先取的 F 号，提示也是 F 第一位，但小哥那一直叫 C ，所以我就又取了 C 号。3️⃣ 荃湾分行里有跨境客户开户的指引。\n\n恒生银行恒生银行，铜锣湾分行。预约铜锣湾分行 4 月 3 日 09:00 - 10:00 。无排队等待，30 分钟开户完成，现场拿提款卡。\n📜我准备的材料：✅ 身份证✅ 港澳通行证✅ 未用到⭕️ 过境小票 (小白条)✅ 未用到⭕️ 3 月份的招行信用卡账单 (掌上生活 - 账单补寄 - 公章电子版，彩印)✅ 未用到⭕️ 过去 6 个月的代发工资行流水 (银行 APP 申请电子版，彩印)✅ 未用到⭕️ 过去 6 个月纳税记录 (个人所得税 APP 申请电子版，彩印)\n📽️开户过程➡️ 4 月 3 日 9:40 到达分行，在 G 层问保安和大堂经理，说直接去 1 层。上 1 层就有一个小哥站在接待台，我说预约了开户，小哥说稍等一下，然后他走了一会回来让我跟他走。小哥的普通话很好。➡️ 带我到一个小隔间，让我等待一下，他去拿个文件。1 分钟回来了，我把老三样和账单、流水、纳税记录给小哥，小哥只要了身份证和通行证，问我通讯地址和身份证上的地址一样吗，我说不一样，小哥说那再稍等一下，我还要再去拿个文件。然后回来，小哥说本次申请是申请优越理财账户，100 万资产免管理费，2 年豁免期内免管理费，1 年后资产不达标来港降级，账户也会有专属的经理对接我说可以的。政策限制账户无法开通美股，我说了解。➡️ 接下来就是小哥操作，在我手机啊恒生银行 APP 操作，中间让我输入了手机号、邮箱地址、详细地址部分，其它都是小哥操作，在一份文件手写了通讯地址，提示一定要以 中国 + 省份名 开头，然后就是签字，在小哥 Pad 上设置密码、确认信息什么的。完成之后小哥说等下我去拿卡，大概 2 3 分钟回来，跟我说一切都可以了。➡️ 到此结束。\n❗️补充说明1️⃣ 我提前一周在 4 月 2 号约了 1 家分行，可惜办其它行时间不够去了。4 月 3 号我分散时间约了 5 家分行，早上去铜锣湾第一家就办理成功。2️⃣ 我预约之前做了攻略，很多说恒生开户需要买保险、买理财才给开，所以我就预约了 6 家分行碰碰运气。3️⃣ 铜锣湾分行有跨境客户开户的指引。\n","categories":["笔记"],"tags":["kh卡"]},{"title":"tailscale局域网组网","url":"/2024/03/13/tailscale%E5%B1%80%E5%9F%9F%E7%BD%91%E7%BB%84%E7%BD%91/","content":"\n经常需要从局域网外面的设备访问家里的NAS，以前都是通过公网来访问的，但是搬家换了网络后不再有公网了，庆幸的是网络是NAT1，仍然可以通过tailscale打洞回家，实现跨网组成局域网。\n\n网络拓扑图\n释义\n网络需要公网、NAT1、IPV6，如果都没有走tailsever的中转服务器会非常的慢，需要自建drep。\n设置旁路由为DMZ主机，正常端口转发应该也可以。\n家庭局域网内所有设备均在同一子网内，例如：192.168.0.0&#x2F;24\n\n配置旁路由Openwrt下的Tailscale服务\n下载Tailscale on Openwrt ，\n项目地址：GitHub - adyanth&#x2F;openwrt-tailscale-enabler: Brings Tailscale to low powered OpenWRT devices\n\n\n解压：\ntar x -zvC / -f openwrt-tailscale-enabler-&lt;tag&gt;.tgz\n\n\n安装需要的库：\nopkg update &amp;&amp; opkg install libustream-openssl ca-bundle kmod-tun\n\n\n配置开机自启动：\n/etc/init.d/tailscale enable\n\n\n启动测试\n/etc/init.d/tailscale start\n\n\n登录tailscale服务，并开启子网路由\ntailscale up --advertise-routes=192.168.0.0/24 --accept-dns=false\n192.168.0.0&#x2F;24：这是我局域网的网段\n启动后获取登录地址注册账号后登录进去即可\n\n\n配置Tailscale服务\n禁用密钥到期，默认6个月会要求重置，我们可以禁用这个\nEdit route settings of xxx：开启子网路由\n\n\n\n(可选项) 配置出口\n如果你想让局域网内的所有设备都走旁路由，那么可以配置这一项。注意这样有好有坏。\n只需要启动时添加--advertise-exit-node 参数即可\ntailscale up --advertise-routes=192.168.0.0/24 --accept-dns=false --advertise-exit-node\n打开管理页面Edit route settings of xxx，勾选 Exit node即可\n\n\n\n配置网络接口\n添加一个新的网络接口\n协议：静态\nIPV4地址：tailscale网页端看到的ip地址，也可以命令行输入tailscale ip 查看\n子网掩码：255.0.0.0\n物理设置-&gt;接口：选择tailscale0接口\n防火墙：lan\n保存应用重启\n旁路由模式无需设置防火墙规则\n\n使用其他设备下载对应的tailscale应用登录同一个账号即可完成组网，非常的方便，路由下的设备可以直接用内网的ip地址访问，例如路由器的IP：192.168.0.1，真的是非常的NICE。\nEnjoy!总所周知，电信网络下除了专线外没有好的线路，但是家里宽带是联通的呀，那我手机或者其他设备先回家不就好了呀。\n参考：Docs · Tailscale DocsOpenWrt安装配置Tailscale – ZhiYunHaiBo 智云海博 (zyh8.com)\n","categories":["笔记"],"tags":["wireguard","tailscale"]},{"title":"探索盐田之云海广场","url":"//post/tan-suo-yan-tian-zhi-yun-hai-guang-chang-z1owmfy.html","content":"\n最新想探索一下盐田，都是骑电动车去的，没什么时间和思考的成本，有时间就去转一转，本次去的是爬一下云海广场。\n\n爬山路线参考​​\n‍\n左边红色为起始位置：盐田北综合车场公交站​​\n走车场里面去​​\n岔路右转这里会有保安值守，保安会不让进去，说已经封路了，但是爬山还没到封路的那一段，后面可能不会让进了。\n​​\n注意：这里保安指路的话如果只是爬云海广场就不要听保安的，直接往里面走即可，如果你想去亚婆地的话可以听保安的话从洞里面钻过去。\n一直沿着绿道走800米左右看到指引牌​​\n一直往上走就可以了，中间没有岔路，全部是台阶路，爬的很舒服，大概1小时就能到云海广场了。\n几张水图随意拍，主要是徒步探索\n​​\n​​\n郊野路线-亚婆地被保安开始指引错了，这次徒步过来没有准备，同事还是拖鞋过来的，爬了一段野径实在是太难受了，就退回来了，计划下次爬一回，直接到梅沙尖\n路线：穿洞过去​​\n这里爬上去，跳过围栏，有个泄洪洞能穿过去，就是叫野径了。\n过了洞左手边是小瀑布​​\n右手边是郊野径确实不太好爬啊\n​​\n后记云海广场还是满舒服的，如果不徒步也可以从东部华侨城坐公交过去，注意一下云海专线公交周中有些线路是不营业的，我觉得可以去坐一下小火车再过去云海广场看看也可以的。\n","categories":["见闻"],"tags":["盐田","云海广场","徒步","爬山"]},{"title":"成都之行","url":"//post/trip-to-chengdu-giytw.html","content":"成都之行\n西安之行后本计划回深，正赶上深圳台风暴雨，遂转向成都去看看花花，可惜时候不对，期待下次了。\n\nD1：西安-成都早上没起来，就去了大明宫外围转了转就动车去成都了。\n西安到成都动车4小时左右，一路上全是隧道，什么也看不到，直达成都东站，已经晚上了，直接入住酒店，晚上只是去春熙路转了转，没什么好看的，就是步行街，看看了那个摆件熊猫。\n\n入住 来住星辰（新世纪广场店）\n\n酒店不太好找，主要是附近的酒店都蛮贵的，这个还算是经济，距离春熙路和文殊院都不算很远。\n入住的还是非常安静的。\n\n\n春熙路​​\n\n宽窄巷子​​\n\n\nD2：都江堰-青城山同城一日游，起的比较早有人过来接，建议携程买，评价是还可以吧，毕竟2个5A。\n\n都江堰（AI）  \n都江堰位于中国四川省成都市，是古代中国伟大的水利工程之一。它始建于公元前256年，由秦国的李冰及其子父子二代共同设计和建造。都江堰通过引水灌溉，使四川盆地的农业得以发达，因此被誉为“天府之国”的象征。\n都江堰的设计顺应了自然条件，既解决了四川盆地的洪水问题，又满足了农田灌溉的需要，可以说是人与自然和谐相处的典范。它遵循了”河道不改，分水不堵，导流不封”的原则，有效避免了河床的淤积和提高。\n都江堰工程主要由鱼嘴分水堤、飞沙堰溢洪道和宝瓶口进水口等部分组成，至今仍在使用，对于研究古代中国的水利科技成就具有重要价值。2000年，都江堰被联合国教科文组织列入世界文化遗产名录。​​\n​​\n\n青城山（AI）  \n青城山位于中国四川省都江堰市，是中国的著名道教圣地，以其秀美的山水景色被誉为“青城天下幽”。\n与青城山关联的道教，自东汉以来就在这里萌芽并逐渐发展起来。青城山被尊为道教”都天圣境”之一，有许多宝贵的道教文化遗产和自然风光。著名的有天师洞、上清宫、玉清宫等，以及后山的老君阁、老君居等。\n除了道教文化，青城山的地质地貌和生态环境也十分独特，拥有丰富的动植物种类，并被誉为中国四大植物园之一。此外，青城山还是中国优秀旅游城市——都江堰的重要组成部分，每年吸引着大量的游客和道教信徒。\n2000年，青城山和都江堰一起被联合国教科文组织列入世界文化遗产名录，成为人类的共同财富。​​​​\n\n人民公园回来后就去人民公园体验下成都人的松散，在鹤鸣喝了会茶​​\n\n\nD3：成都熊猫基地-三星堆这次主要就是来基地看花花的，可惜成都的天气实在是太热了，花花没有出来，我也没看到花花，还好看到了小熊猫。\n三星堆展出非常的不错，独一无二吧，可惜啊管理太烂了。\n\n熊猫基地\n起来的很早，打车去的就为了看花花，进去后直奔6号别墅，可以太热了，花花没有出来，只看了其他室内馆的熊猫，意思了一下，有些遗憾了。如果想看花花问了工作人员，要冬天去才行。\n还好看到了小熊猫，太可爱了，太可爱了，我觉得小熊猫比大熊猫可爱啊。\n\n三星堆基地出来就有去三星堆的大巴，来回55元，注意时间，不是任何时间都有，在成都可以关注景区直通车那个公众号，里面有到各个景区的直通车，还是不错的。三星堆请了讲解，太乱了，全是人，又非常的吵，我感觉非常的不爽，产品还是非常的震撼的。\n\n\nD4：文殊院-回深圳早起去了文殊院上了香，免费的，文殊院没什么商业化，我觉得非常的Nice。\n机票为了时间买了天府机场的，远的简直是令人发指，当晚延误，让我决定以后不再坐东海航空的航班，东海确实就是垃圾。\n后记成都之行，整体比较紧促，九寨沟和乐山都没有去，只能等下次川西之行再去了。\n最大的意外就是航班延误，我从下午5点在机场等到了早上4点才起飞，其他航班晚上都拉去了酒店，东海这个垃圾就是不拉，在机场过夜。另外一个惊喜就是利用经典白信用卡买的机票，延误后退了我机票的钱，算是白嫖了一张机票，浪费了很长的时间就是。\n在贵宾室待了一下午和晚上，吃了几顿饭，这次的权益用的真的是值了。\n‍\n‍\n","categories":["见闻"],"tags":["成都","熊猫","三星堆","花花"]},{"title":"西安之行","url":"//post/trip-to-xi-an-1nkl5a.html","content":"西安之行\n对古都长安倾心已久，以前去过一次华山，但未在西安过多的停留，正好抢到了陕西历史博物馆的门票，故计划前往西安。去成都是个意外成行的方案，只在成都附近转了转。\n\n西安行程安排D1：早上起早深圳飞西安起早飞的，主要是中午到达，下午和晚上可以出去逛逛。约了陕历博，所以住在小寨地铁站附近。\n\n深圳-西安\n\n地铁14号线-西安北站-2号线-小寨地铁站\n\n西安北站转车非常的远，如果这样坐车，建议多坐几站去4号线转车。\n\n\n前往小寨地铁站附近的 璞宿南巷民宿\n\n这个民宿优缺点都有\n优点是就在地铁站的上边，去哪里非常的方便，楼下也有公交站，附近有赛格，吃住行都很方便。\n缺点是民宿是公寓类的，和一些美甲的店在同一层楼，人来人往的，白天电梯很难等，晚上下班后会好不少，另外晚上会有飙车党，有点烦。\n\n\n碑林博物馆\n西安中午太热了，睡了一个午觉后，凉快了不少，前往碑林博物馆。碑林博物馆在重修，没有什么展出的，所以票价10元，要不远远不止这个价格。\n‍\n最好是请个讲解，要不对着那几幅拓片，我觉得什么也看不懂，大部分碑文都没有展出，有些遗憾。我是蹭了一个讲解，偏向于讲碑文背后故事的。《集王三藏圣教序》的行书版本以前还有临摹过，不过学不像，影子都不像。《多宝塔碑》的楷书正中心怀，可惜书法与我无缘了，我的书法笔画非常的生硬。\n​​\n‍\n可惜没有看到昭陵六骏\n\n西安城墙碑林博物馆出来后，从文昌门上城墙，现在文昌门到朱雀门这一段是只能步行，无法骑车了，我是步行到朱雀门租车，也可以在文昌门租车，逆时针骑行也是可以的，骑一圈13.4公里，本以为轻轻松松，奈何城墙上的路是搓衣板路，骑着震手，另外车子也骑不快，骑了一圈大概80分钟才结束。\n城墙的夜晚是非常的美的，建议是晚上去，还能看到日落，白天实在是太热了，也不好骑车。在晚上8点以前，车子可以就近的还车点还车，但是晚8点以后就只有文昌门和朱雀门可以还车了，也就是说要骑一圈，注意体力。​​\n\n钟楼朱雀门还车后，可以步行到永宁门下城墙，一直往前走，就是钟楼了，晚上拍照还是很出片的，我没有上去，比较无感。\n\n回民街（坑人街）钟楼下地下通道就能直达回民街，也能去鼓楼，著名的坑人一条街，不好吃还贵，我是在回民街后面的几条街解决的晚饭还可以，就在那个寺庙的后面那条街，想吃东西还是应该去洒金桥。\n\n地铁2号线回小寨住宿离地铁近真的非常的Nice，出来就能回去睡觉了。\n\n\nD2：大雁塔-陕历博-音乐喷泉-大唐不夜城早上实在是起不来，起来的时候都差不多9点多了，刚好去大雁塔转转，离小寨地铁站很近。\n\n大慈恩寺-大雁塔大雁塔在大慈恩寺里面，需要买大门票，如果进塔需要重新买票，我只是在外面看了看，感受一下历史的厚重。​​\n\n陕历博太困了，回酒店睡了一个午觉，约了一个同城的讲解团，下午2点进陕历博，听了2小时的讲解，不虚此行，如果可以其实可以逛一整天的。\n​​还有一个秦汉馆，由于太远了，没有成行是个遗憾，希望以后补上吧\n\n北广场音乐喷泉出来后可以步行或者骑车一站地到达北广场看音乐喷泉，早点去有个好的位置看起来还是满震撼的。\n\n大唐不夜城在南广场，先看节目单，就是小吃一条街，感觉没什么。题外话：大唐不夜城的人非常的多，但是消费能力并不强，确实是消费降级了，而且不夜城以小吃类的居多，也不会太赚钱才对，主要还是吸引人流。\n\n\nD3：鼓楼-皇陵-丽山园-长恨歌早上又是没起来，太累了，换了家酒店 万奥致远安远门店，刚好路过鼓楼。\n\n鼓楼钟楼地铁站出来，直奔鼓楼，主要是有编钟表演，北方很少有这种，听起来还是比较不错的。里面没什么看的。​​\n\n万奥致远安远门店安远门地铁站旁边，主要是为了去大明宫看看，实际上也没什么看的，可以认为就是一个大的公园？\n\n秦始皇陵在临潼，地铁转公交即可，同城买了个团的讲解，这个必须买讲解，要不就3个坑，什么也不知道，如果不是独一份，我真觉得没什么意思，听了2小时的讲解，兵马俑本身给我的感受就是秦的那段历史还有多少没有被发掘？​​\n​​\n题外话：博物馆修的大门真的远，出来缺非常的进，只能说商业化真的太浓了，好歹也是5A的景区，收费也贵，为何自己坑自己呢？\n\n丽山园黄陵的门票是包含黄陵博物馆和丽山园的，很多人都不知道，只去了一个，可以说更加的不值了。黄陵博物馆主要是3个坑，可能最有看头的就是跪射俑了，而丽山园也有2个坑以及一个大的IP，铜车马。丽山园真的是很大，建议买个电瓶车，如果时间足够的话可以走走，我就是步行的，时间不够了，只看了铜车马博物馆。\n\n长恨歌很纠结要不要去华清池，后面看了介绍就是一个池子，我觉得实在是不值，就算了没有去，买了368的长恨歌第1场。\n对于长恨歌，我个人的看法是不值368的，虽然是实景的演出，但可能是已经演了很多年，整个实景并不优秀，甚至我觉得不如武夷山那个大红袍，不过仁者见仁智者见智吧，音箱效果也不行。\n第一场结束后是有地铁回市区的，第二场和第三场可能没有地铁了，可以拼车回去，也可以提前预约大巴。​​\n\n小吃摊很惊喜的是酒店楼下晚上有小吃摊，吃的相当的Nice，居然是东北的口味蒸饺和混沌。\n\n\nD4：华山（未成行）评估了一下自己的状态，发现无法爬上去，这次也只有自己去，没有小伙伴更不好爬，我也不想坐缆车，所以很遗憾的只能下次再来了。\n后记：西安之行，还是非常的美好的，虽然景点风景上都很一般，但是对于历史的勾勒让人知道那个年代的厚重，讲解真的很重要。\n‍\n","categories":["见闻"],"tags":["西安","兵马俑","长恨歌"]},{"title":"利用haproxy复用443端口同时使用tcp和http协议","url":"//post/use-haproxy-to-reuse-the-443-port-at-the-same-time-using-the-tcp-and-http-protocol-zmc1xf.html","content":"\n最近买了一台aws的新加坡的机器，对三网的网络都很不错，遂想好好的利用一下这台机器的网络，做梯子有点大材小用了，同时可以用这台机器给我的主力机做网络代理。\n\n为什么用Haproxy？梯子一般用网络协议为tcp，而反代其他网站或者自己的网站是http协议的，而haproxy刚好可以利用sni很好的处理tcp和http协议，这就配置起来简单容易了很多，实际上我的nginx前端也是haproxy的。\n什么是Haproxy(AI)？HAProxy（High Availability Proxy）是一款开源的负载均衡器和代理服务器，常用于提高网络和应用程序的性能与可靠性。它通常部署在客户端与服务器之间，以分发客户端请求到多个后端服务器，从而实现负载均衡、故障转移、SSL 终止等功能。\n主要特性：\n负载均衡：HAProxy 可以在多个后端服务器之间分配请求，支持多种负载均衡算法（如轮询、最少连接、源地址哈希等）。\n高可用性：HAProxy 支持对后端服务器的健康检查，可以在检测到某个服务器故障时自动停止向其发送请求。\nSSL&#x2F;TLS 终止：HAProxy 能够处理和终止 SSL&#x2F;TLS 连接，将加密流量解密后再转发给后端服务器，从而减轻后端服务器的负担。\n内容重写：能够根据请求的内容对请求或响应进行重写，例如修改 URL 或插入 HTTP 头。\nHTTP&#x2F;2 和 WebSocket 支持：支持现代的传输协议和技术，能够处理实时 Web 应用的连接。\n丰富的监控与统计：提供详细的实时监控和日志功能，可以帮助运维人员了解流量情况和系统性能。\n\n使用场景：\n网站负载均衡：将来自用户的请求均匀地分配到多台 Web 服务器上。\nAPI 网关：在微服务架构中，HAProxy 可以作为 API 网关，管理不同服务之间的流量。\n高可用架构：用于确保关键应用和服务的高可用性，防止单点故障。\n\n总结：HAProxy 是一个灵活、强大且广泛使用的工具，适用于需要高性能、高可靠性的网络架构。其广泛的功能和配置选项，适合从中小型企业到大型互联网公司在内的各种场景。\n使用场景通用配置global    log /dev/log local0    log /dev/log local1 notice    chroot /var/lib/haproxy    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners    stats timeout 30s    user haproxy    group haproxy    daemon    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-ticketsdefaults    log global    mode tcp    option tcplog    option dontlognull    timeout connect 24h    timeout client 24h    timeout server 24h\n\n转发tcp流量给后端的Trojan Sever#配置tcp入站，主要复用443端口frontend tcp_in    mode tcp    bind *:443    tcp-request inspect-delay 3s    tcp-request content accept if &#123; req.ssl_hello_type 1 &#125;       # &lt;sni_domin&gt; Trojan sni domain    acl host_trojan req_ssl_sni -i &lt;sni_domain&gt;    # 2. tcp 转发后端处理    use_backend trojan_backend if host_trojan # Trojan 后端配置,转发给本地的9000端口backend trojan_backend    mode tcp    server trojan_server 127.0.0.1:9000 check\n\n反代本地web网站并配置https# http转httpsfrontend http_in    mode http    bind *:80    http-request redirect scheme https# 配置http入站frontend https_in\t## 配置acme.sh申请证书    # export DEPLOY_HAPROXY_PEM_PATH=/usr/local/etc/haproxy/cert/    # export DEPLOY_HAPROXY_RELOAD=&quot;/bin/systemctl restart haproxy&quot;    # acme.sh --deploy -d &lt;domain&gt; --deploy-hook haproxy\t##     mode http    bind *:443 ssl crt /usr/local/etc/haproxy/cert alpn h2,http/1.1    # 配置日志    option httplog    log-format &quot;%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %&#123;+Q&#125;r&quot;    # 捕获更多请求信息    capture request header Host len 40    capture request header User-Agent len 100    capture request header X-Forwarded-For len 15    # &lt;web_domain&gt; Web Sni Doamin\t## hdr(host): 匹配域名\t## hdr_end(host): 匹配子域名    acl host_web hdr(host) -i &lt;web_domain&gt;    use_backend nginx_server if host_web\t# 未匹配转发    default_backend default_backend# web后端,不传递其他Header信息backend nginx_server    mode http    server nginx_server 127.0.0.1:8443 check# 默认后端backend default_backend    mode http    http-request deny\n\n利用ssl透传反代其他服务器的web服务\n优势在于不用在本机部署ssl证书，会加密转发到后端服务器，劣势是无法修改请求头，各有优势。\n\n# ssl透传需要走tcp协议frontend tcp_in    mode tcp    bind *:443    tcp-request inspect-delay 3s    tcp-request content accept if &#123; req.ssl_hello_type 1 &#125;      # 域名匹配规则    ## 1. ssl透传\t## tcp协议不能用hdr,需要使用req_ssl_sni\t## -i:匹配域名\t## -m sub:匹配子域名和自身    acl host_app req_ssl_sni -m &lt;backend_web_domain&gt;      # 1. ssl穿透，由后端服务器负责处理ssl，负载均衡服务器只负责加密转发，适合原域名转发的情况    use_backend forward_backend if host_app# ssl穿透backend forward_backend    mode tcp    #balance roundrobin    option ssl-hello-chk    server blog_server IP:443 weight 1 check inter 2000 rise 2 fall 4\n\n本机终端ssl后转发到后端web服务器\n接近cdn的原理，优势和劣势和上面的反过来，需要配置ssl证书，优势在于可以修改请求，并能隐藏后端服务器信息。\n\n# http转httpsfrontend http_in    mode http    bind *:80    http-request redirect scheme https# 配置http入站frontend https_in\t## 配置acme.sh申请证书    # export DEPLOY_HAPROXY_PEM_PATH=/usr/local/etc/haproxy/cert/    # export DEPLOY_HAPROXY_RELOAD=&quot;/bin/systemctl restart haproxy&quot;    # acme.sh --deploy -d &lt;domain&gt; --deploy-hook haproxy\t##     mode http    bind *:443 ssl crt /usr/local/etc/haproxy/cert alpn h2,http/1.1    # 配置日志    option httplog    log-format &quot;%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %&#123;+Q&#125;r&quot;    # 捕获更多请求信息    capture request header Host len 40    capture request header User-Agent len 100    capture request header X-Forwarded-For len 15    # &lt;web_domain&gt; Web Sni Doamin\t## hdr(host): 匹配域名\t## hdr_end(host): 匹配子域名    acl host_backend_web hdr(host) -i &lt;web_domain&gt;    use_backend blog_backend if host_backend_web# web后端，sni转发到其他服务器backend blog_backend    mode http    option forwardfor    option http-server-close      # 保持客户端真实IP    http-request set-header X-Forwarded-For %[src]    http-request set-header X-Real-IP %[src]    http-request set-header Host &lt;backend_web_domain&gt;      # 转发到远程nginx服务器    server nginx_server IP:443 ssl check verify none check-sni &lt;backend_web_domain&gt; sni str(&lt;backend_web_domain&gt;) inter 2000 rise 2 fall 4\n\n备忘自己使用的配置global    log /dev/log local0    log /dev/log local1 notice    chroot /var/lib/haproxy    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners    stats timeout 30s    user haproxy    group haproxy    daemon    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-ticketsdefaults    log global    mode tcp    option tcplog    option dontlognull    timeout connect 24h    timeout client 24h    timeout server 24h# http转httpsfrontend http_in    mode http    bind *:80    http-request redirect scheme https#配置tcp入站，主要复用443端口frontend tcp_in    mode tcp    bind *:443    tcp-request inspect-delay 3s    tcp-request content accept if &#123; req.ssl_hello_type 1 &#125;      # 域名匹配规则    ## 1. ssl透传    acl host_app req_ssl_sni -m &lt;backend_web_domain&gt;    ## 2. 复用443 tcp代理    acl host_trojan req_ssl_sni -i &lt;trojan_sni_domain&gt;      # 1. ssl穿透，由后端服务器负责处理ssl，负载均衡服务器只负责加密转发，适合原域名转发的情况    use_backend forward_backend if host_app    # 2. tcp 转发后端处理    use_backend trojan_backend if host_trojan # 配置http入站frontend https_in    # export DEPLOY_HAPROXY_PEM_PATH=/usr/local/etc/haproxy/cert/    # export DEPLOY_HAPROXY_RELOAD=&quot;/bin/systemctl restart haproxy&quot;    # acme.sh --deploy -d &lt;domain&gt; --deploy-hook haproxy    mode http    bind *:443 ssl crt /usr/local/etc/haproxy/cert alpn h2,http/1.1    # 配置日志    option httplog    log-format &quot;%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %&#123;+Q&#125;r&quot;    # 捕获更多请求信息    capture request header Host len 40    capture request header User-Agent len 100    capture request header X-Forwarded-For len 15    # 处理web流量转发给后端    acl host_blog hdr(host) -i &lt;web_domain&gt;    use_backend blog_backend if host_blog    default_backend default_backend# web后端，sni转发到其他服务器backend blog_backend    mode http    option forwardfor    option http-server-close      # 保持客户端真实IP    http-request set-header X-Forwarded-For %[src]    http-request set-header X-Real-IP %[src]    http-request set-header Host &lt;backend_web_domain&gt;      # 转发到远程nginx服务器    server nginx_server IP:443 ssl check verify none check-sni &lt;backend_web_domain&gt; sni str(&lt;backend_web_domain&gt;) inter 2000 rise 2 fall 4# ssl穿透backend forward_backend    mode tcp    #balance roundrobin    option ssl-hello-chk    server blog_server IP:443 weight 1 check inter 2000 rise 2 fall 4# Trojan 后端配置backend trojan_backend    mode tcp    server trojan_server 127.0.0.1:9000 check# 默认后端backend default_backend    mode http    http-request deny\n\n后记Haproxy做这个事情我觉得比Nginx要好不少，利用SNI分流真好呀。\n","categories":["笔记"],"tags":["haproxy","sni","sing-box"]},{"title":"利用ipv6愉快的回家吧","url":"//post/use-ipv6-to-go-home-happily-z1rf1xg.html","content":"利用ipv6愉快的回家吧\n经常在外面有需要连到家里的情况，比如访问家里拿点文件或者跑个编译的服务什么的，这时候能让网络回家就至关重要了，在没有公网ipv4的情况下，以往都需要使用内网穿透，利用frp或者中转商的服务回家，不仅慢还有一定的风险。现在ipv6已经很普及了，在没有ipv4的情况下使用ipv6就是最大的优势。\n\n回家的3种方案\nwireguard组网，利用udp协议回家。\n基于tcp协议的ss等加密协议\nhttp&#x2F;socks5等（不推荐，无加密）\n\n前两种方案的区别在于是否需要组网，也就是说是单向的访问还是双向的访问需求，如果单纯只是需要单向的回家，那么ss这种更加的合适，udp一般来说如果大量的包就会被运营商Qos了。\nWireguard组网配置参考之前写过的配置：Openwrt配置Wireguard组网。wireguard的优势在于更加的灵活，可以配置路由让允许的流量进站，其他的不进。同时在移动端有很好的省电策略。\n利用ss协议回家ss协议这种的优势在于基于tcp协议，不会Qos，稳定性也更好一些，相对配置起来也简单了不少。\n配置server端由于我家里使用了mihomo，恰好mihomo也有server的能力，直接使用了mihomo来完成。\n\n配置ss入站\n\nlisteners:\t- name: ss-in\t  type: shadowsocks\t  port: 10001\t  listen: 0.0.0.0\t  cipher: aes-256-gcm\t  password: vlmpIPSyHH6f4S8WVPdRIHIlzmB+GIRfoH3aNJ/t9Gg=\t  udp: true\n\n具体修改参考官网wiki：Mihomo Listener Shadowsoks\n\n添加规则（可选） 有些默认的规则中192.168.0.0/24​这个段是私有地址，正常都是直连的，我的不是所以要自己配置一下规则\n - IP-CIDR,192.168.0.0/24,DIRECT\n\n配置客户端\n配置proxy\n\nproxies:  - name: &quot;home&quot;    type: ss    server: &lt;your_ipv6_addr or domaim&gt;    port: &lt;server port&gt;    udp: true    cipher: aes-256-gcm    password: &quot;vlmpIPSyHH6f4S8WVPdRIHIlzmB+GIRfoH3aNJ/t9Gg=&quot;\n\n\n配置规则\n\n- IP-CIDR,192.168.0.0/24,home\n\n​192.168.0.0/24​ 我的内网网段\n总结两种方式的使用取决于是组网还是简单的回家，各有优势和劣势，但最终都能回家，Nice。\n受限于家里的上传带宽，这种方式不太适合大数据的下载。\n‍\n","categories":["笔记"],"tags":["ipv6","wireguard","ss"]},{"title":"利用restic备份N1数据","url":"//post/use-restic-backup-n1-data-1y20cv.html","content":"利用restic备份N1数据\n最近搞定了ipv6，同时家里有台N1没跑满，就想把一些小的服务仍家里N1跑，但是不太放心N1的稳定性，所以决定利用restic定时备份到U盘，遂让Ai帮忙写了一个bash脚本。\n\n需求\n按需挂载&#x2F;卸载U盘\n\n能够停止&#x2F;开启特定的docker容器\n\n不少容器不支持热备份数据，需要停止后再启动\n\n\n备份特定的文件夹\n\n仅保留最近的几个版本减少备份的体积\n\n较为完善的检查和通知功能\n\n成功和失败后能通过tg bot通知\n\n\n依赖\ndocker\ndocker compose\ncurl\nrestic\n\n脚本#!/bin/bash# 配置变量USB_DEVICE=&quot;/dev/sda1&quot;  # U盘设备路径MOUNT_POINT=&quot;/mnt/sda1&quot;  # U盘挂载点RESTIC_REPO=&quot;$MOUNT_POINT/restic-repo&quot;  # Restic仓库路径RESTIC_PASSWORD=&quot;&lt;password&gt;&quot;  # Restic仓库密码DOCKERFILES_DIR=&quot;/root/.dockerfile&quot;  # dockerfiles 文件夹路径TELEGRAM_API_URL=&quot;https://api.telegram.org/bot&lt;token&gt;/sendmessage&quot;  # 替换为你的 Telegram Bot API URLCHAT_ID=&quot;&lt;chat_id&gt;&quot;  # 替换为你的 Telegram Chat IDKEEP_LAST_SNAPSHOTS_BUMBER=3 # 保留最新的几个版本# 要备份的容器及其 Compose 文件（格式：容器名称:compose文件名）# 如果为空，将备份所有容器CONTAINERS_TO_BACKUP=(    &quot;memos:compose-memos.yml&quot;    # &quot;container2:docker-compose2.yml&quot;)# 要备份的普通文件夹路径DIRECTORIES_TO_BACKUP=(    &quot;/root/.backups&quot;)# 函数: 错误处理error_exit() &#123;    echo &quot;错误: $@&quot; &gt;&amp;2    send_telegram &quot;备份失败: $@&quot;    exit 1&#125;# 函数: 检查命令是否存在check_command() &#123;    command -v $1 &gt;/dev/null 2&gt;&amp;1 || error_exit &quot;需要$1但未安装。 退出。&quot;&#125;# 函数: 发送Telegram通知send_telegram() &#123;    local message=$1    curl -s -X POST &quot;$TELEGRAM_API_URL&quot; -d chat_id=&quot;$CHAT_ID&quot; -d text=&quot;$message&quot; &gt;/dev/null 2&gt;&amp;1&#125;# 检查必要的命令check_command resticcheck_command dockercheck_command docker-composecheck_command curl# 挂载U盘mount_usb() &#123;    if ! mountpoint -q &quot;$MOUNT_POINT&quot;; then        mkdir -p &quot;$MOUNT_POINT&quot;        mount &quot;$USB_DEVICE&quot; &quot;$MOUNT_POINT&quot; || error_exit &quot;无法挂载U盘&quot;    else        echo &quot;U盘已经挂载&quot;    fi&#125;# 卸载U盘unmount_usb() &#123;    if mountpoint -q &quot;$MOUNT_POINT&quot;; then        umount &quot;$MOUNT_POINT&quot; || error_exit &quot;无法卸载U盘&quot;        rmdir &quot;$MOUNT_POINT&quot;    else        echo &quot;U盘未挂载&quot;    fi&#125;# 获取所有容器和对应的Compose文件get_all_containers() &#123;    local containers=()    for compose_file in &quot;$DOCKERFILES_DIR&quot;/*.yml; do        if [ -f &quot;$compose_file&quot; ]; then            local file_name=$(basename &quot;$compose_file&quot;)            local project_name=$(docker-compose -f &quot;$compose_file&quot; config --services)            for service in $project_name; do                containers+=(&quot;$service:$file_name&quot;)            done        fi    done    echo &quot;$&#123;containers[@]&#125;&quot;&#125;# 停止指定的Docker容器stop_containers() &#123;    local containers=(&quot;$@&quot;)    for container in &quot;$&#123;containers[@]&#125;&quot;; do        IFS=&#x27;:&#x27; read -r -a array &lt;&lt;&lt; &quot;$container&quot;        container_name=&quot;$&#123;array[0]&#125;&quot;        compose_file=&quot;$&#123;array[1]&#125;&quot;        echo &quot;停止容器: $container_name&quot;        docker-compose -f &quot;$DOCKERFILES_DIR/$compose_file&quot; stop &quot;$container_name&quot; || error_exit &quot;停止容器 $container_name 失败&quot;    done&#125;# 启动之前停止的Docker容器start_containers() &#123;    local containers=(&quot;$@&quot;)    for container in &quot;$&#123;containers[@]&#125;&quot;; do        IFS=&#x27;:&#x27; read -r -a array &lt;&lt;&lt; &quot;$container&quot;        container_name=&quot;$&#123;array[0]&#125;&quot;        compose_file=&quot;$&#123;array[1]&#125;&quot;        echo &quot;启动容器: $container_name&quot;        docker-compose -f &quot;$DOCKERFILES_DIR/$compose_file&quot; start &quot;$container_name&quot; || error_exit &quot;启动容器 $container_name 失败&quot;    done&#125;# 执行Restic备份do_backup() &#123;    export RESTIC_PASSWORD    if [ ! -d &quot;$RESTIC_REPO&quot; ]; then        restic init --repo &quot;$RESTIC_REPO&quot; || error_exit &quot;初始化Restic仓库失败&quot;    fi      for container in &quot;$@&quot;; do        IFS=&#x27;:&#x27; read -r -a array &lt;&lt;&lt; &quot;$container&quot;        container_name=&quot;$&#123;array[0]&#125;&quot;        echo &quot;备份容器 $container_name 的数据&quot;        container_id=$(docker ps -aqf &quot;name=$container_name&quot;)        if [ -z &quot;$container_id&quot; ]; then            echo &quot;警告: 找不到容器 $container_name，跳过&quot;            continue        fi            # 获取容器的挂载点        mounts=$(docker inspect -f &#x27;&#123;&#123;range .Mounts&#125;&#125;&#123;&#123;.Source&#125;&#125;&#123;&#123;&quot;\\n&quot;&#125;&#125;&#123;&#123;end&#125;&#125;&#x27; &quot;$container_id&quot;)            # 备份每个挂载点        while IFS= read -r mount; do            if [ -n &quot;$mount&quot; ]; then                echo &quot;备份挂载点: $mount&quot;                restic -r &quot;$RESTIC_REPO&quot; backup &quot;$mount&quot; --tag &quot;$container_name&quot; || error_exit &quot;备份 $container_name 的 $mount 失败&quot;            fi        done &lt;&lt;&lt; &quot;$mounts&quot;    done    for directory in &quot;$&#123;DIRECTORIES_TO_BACKUP[@]&#125;&quot;; do        if [ -d &quot;$directory&quot; ]; then            echo &quot;备份文件夹: $directory&quot;            restic -r &quot;$RESTIC_REPO&quot; backup &quot;$directory&quot; --tag &quot;directory_backup&quot; || error_exit &quot;备份目录 $directory 失败&quot;        else            echo &quot;警告: 找不到目录 $directory，跳过&quot;        fi    done&#125;# 保留最新的3个快照，减少备份的体积do_keep_last_snapshots() &#123;    export RESTIC_PASSWORD    if [ ! -d &quot;$RESTIC_REPO&quot; ]; then        restic init --repo &quot;$RESTIC_REPO&quot; || error_exit &quot;初始化Restic仓库失败&quot;    fi    echo &quot;清理仓库，只保留最新 $KEEP_LAST_SNAPSHOTS_BUMBER 的快照&quot;    restic -r &quot;$RESTIC_REPO&quot; forget --keep-last $KEEP_LAST_SNAPSHOTS_BUMBER --prune || error_exit &quot;清理仓库失败&quot;&#125;# 主执行流程main() &#123;    local containers_to_process=()    if [ $&#123;#CONTAINERS_TO_BACKUP[@]&#125; -eq 0 ]; then        echo &quot;CONTAINERS_TO_BACKUP 为空，将备份所有容器&quot;        containers_to_process=($(get_all_containers))    else        containers_to_process=(&quot;$&#123;CONTAINERS_TO_BACKUP[@]&#125;&quot;)    fi    mount_usb    stop_containers &quot;$&#123;containers_to_process[@]&#125;&quot;    do_backup &quot;$&#123;containers_to_process[@]&#125;&quot;    do_keep_last_snapshots    start_containers &quot;$&#123;containers_to_process[@]&#125;&quot;    unmount_usb    echo &quot;备份完成&quot;    send_telegram &quot;备份成功: 所有容器和文件夹的备份已完成&quot;&#125;# 执行主函数mainexit 0\n","categories":["笔记"],"tags":["docker","N1","restic"]},{"title":"微信多开的bat脚本","url":"//post/wechat-barting-bat-script-zt5q6f.html","content":"微信多开的bat脚本\n有时候需要在windows上使用多个pc端的微信，我们可以利用bat脚本来处理。\n\n利用start​命令多开几个即可@echo offstart &quot;&quot; &quot;C:\\Program Files (x86)\\Tencent\\WeChat\\WeChat.exe&quot;start &quot;&quot; &quot;C:\\Program Files (x86)\\Tencent\\WeChat\\WeChat.exe&quot;exit\n\n把上面的代码保存在bat​文件中，打开即会启动两个微信，扫码即可。\n","categories":["笔记"],"tags":["win","微信","多开"]},{"title":"WPS实用小技巧","url":"//post/wps-practical-tips-z1hn8oa.html","content":"WPS实用小技巧\n经常使用wps，有些常用的技巧，这里记录一下，有想到的就更新一下。\n\nwps表格打印时不显示底纹\n最近碰到一个小的问题，就是我的表格是有填充颜色的，但是黑白打印机，打印出来非常的模糊，字看不清。\n\n方案：可以在打印时选择单色打印​即可。\n\n选中打印范围\n打印预览\n选择页面设置\n切换到工作表标签\n选择单色打印\n\n​​\n","categories":["笔记"],"tags":["wps"]},{"title":"wsl2升级报错及解决","url":"//post/wsl2-upgrade-errors-and-solves-hgwfi.html","content":"wsl2升级报错及解决\n电脑很长一段时间没有用了，最近打开终端的WSL2，发现升级的时候报错，记录一下。\n\n报错信息WSL 正在完成升级...Could not write value  to key \\SOFTWARE\\Classes\\Directory\\shell\\WSL.   Verify that you have sufficient access to that key, or contact your support personnel.更新失败(退出代码: 1603)。Error code: Wsl/CallMsi/Install/ERROR_INSTALL_FAILURE[已退出进程，代码为 4294967295 (0xffffffff)]现在可以使用Ctrl+D关闭此终端，或按 Enter 重新启动。\n\n解决方案查了一下应该是注册表重命名的时候出现了报错，需要重命名一下注册表项\n需要更改注册表项\n计算机\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Drive\\shell\\WSL\n\n计算机\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\background\\shell\\WSL\n\n计算机\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\shell\\WSL\n\n\n改完之后的注册表项\n计算机\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Drive\\shell\\WSL_bak\n计算机\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\background\\shell\\WSL_bak\n计算机\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\shell\\WSL_bak\n\n参考Could not write value to key \\SOFTWARE\\Classes\\Drive\\shell\\WSL · Issue #11697 · microsoft&#x2F;WSL (github.com)\n‍\n","categories":["笔记"],"tags":["wsl","update","regedit"]},{"title":"内网穿透Cloudflare Tunnel","url":"/2024/03/14/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8FCloudflare%20Tunnel/","content":"NAT穿透（内网穿透）\n在计算机科学中，NAT穿越（NAT traversal）涉及TCP&#x2F;IP网络中的一个常见问题，即在处于使用了NAT设备的私有TCP&#x2F;IP网络中的主机之间创建连接的问题。会遇到这个问题的通常是那些客户端网络交互应用程序的开发人员，尤其是在对等网络和VoIP领域中。\n\n简而言之，内网穿透就是能把本地端口映射到广域网中的一种方式，对于本地调试网络服务有非常大的用处。\nCloudflare Tunnel\n保护您的 web 服务器免受直接攻击从部署应用程序的那一刻起，开发人员和 IT 人员就要花费时间来将其封锁起来：配置 ACL，轮换 IP 地址，使用像 GRE 隧道这样的笨拙解决方案。有一种更简单、更安全的方法可以保护您的应用程序和 web 服务器免受直接攻击：Cloudflare Tunnel。确保您的服务器安全，无论它在何处运行：公共云、私有云、Kubernetes 群集，甚至是电视下方的 Mac mini。\n\nTunnel | Zero Trust 应用连接器 | Cloudflare开通需要信用卡验证，但不需要付费\n配置穿透服务安装Cloudflared\nMacOS$ brew install cloudflared\nArchlinux$ sudo pacman -S cloudflared\n二进制安装$ sudo curl -L &#x27;&lt;https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64&gt;&#x27; -o /usr/bin/cloudflared$ sudo chmod +x /usr/bin/cloudflared\n\n登录验证\n先登录到cloudflare下载证书文件$ cloudflared tunnel login\n执行命令后会给出验证的链接，点开打开浏览器验证janz@DESKTOP-OBJON98:~$ cloudflared tunnel loginPlease open the following URL and log in with your Cloudflare account:&lt;https://dash.cloudflare.com/argotunnel?callback=https%3A%2F%2Flogin.cloudflareaccess.org%2FSZMoYnqBQ1-KyfNot7pElB2pxAEec9fYexw-F9CPiGE%3D&gt;Leave cloudflared running to download the cert automatically.\n选择一个域名授权即可，成功后命令行返回cert.pem的信息You have successfully logged in.If you wish to copy your credentials to a server, they have been saved to:/home/janz/.cloudflared/cert.pem\n\n新建一条隧道每台电脑用一条隧道就可以\n$ cloudflared tunnel create &lt;隧道名字&gt;# 示例$ cloudflared tunnel create web\n成功会生成一个随机UUID的json文件。\njanz@DESKTOP-OBJON98:~$ cloudflared tunnel create webTunnel credentials written to /home/janz/.cloudflared/c090530f-xxxx-4807-a6de-645654e2c95a.json. cloudflared chose this file based on where your origin certificate was found. Keep this file secret. To revoke these credentials, delete the tunnel.Created tunnel web with id c090530f-xxxx-4807-a6de-645654e2c95a\n\n编写配置文件config.yml$ vim ~/.cloudflared/config.yml\n$ # 新建隧道随机的UUIDtunnel: c090530f-xxxx-4807-a6de-645654e2c95a# UUID的json文件位置credentials-file: /home/janz/.cloudflared/c090530f-xxxx-4807-a6de-645654e2c95a.jsonprotocol: h2muxingress:  # 假如授权的域名为: abc.com  # 为每个需要的本地端口设置子域名即可  # http协议的应用  - hostname: &lt;app1&gt;.abc.com    service: &lt;http://localhost:80&gt;  # https协议的应用  - hostname: &lt;app2&gt;.abc.com    service: &lt;https://localhost:443&gt;  # sock协议的应用  - hostname: &lt;app3&gt;.abc.com    service: unix:/tmp/mysql.sock  # ssh服务  - hostname: &lt;app4&gt;.abc.com    service: ssh://localhost:22  - service: http_status:404\n\n支持的协议参考官方文档：Ingress rules · Cloudflare Zero Trust docs\n添加DNS，把域名绑定到隧道# 配置文件中的hostname域名都需要添加$ cloudflared tunnel route dns web app1.abc.com$ cloudflared tunnel route dns web app2.abc.com$ cloudflared tunnel route dns web app3.abc.com$ cloudflared tunnel route dns web app4.abc.com\n成功后提示CNAME已经添加了\njanz@DESKTOP-OBJON98:~$ cloudflared tunnel route dns web app2023-03-16T09:23:37Z INF Added CNAME app.janz.eu.org which will route to this tunnel tunnelID=c090530f-xxxx-4807-a6de-645654e2c95a\n\n启动服务\n单条隧道$ cloudflared tunnel run web只要能看到最后有链接到的位置就是成功的2023-03-16T09:28:51Z INF Connection 2b409b51-790d-4688-9574-9d15ba76150f registered with protocol: http2 connIndex=0 ip=198.18.13.77 location=SJC2023-03-16T09:28:52Z INF Connection 3d66e42d-56fa-4a13-868c-5f7e2888453d registered with protocol: http2 connIndex=1 ip=198.18.13.76 location=LAX\n多条隧道，可以指定json文件来启用不同的隧道$ cloudflared tunnel --config ~/.cloudflared/c090530f-xxxx-yyyy-a6de-645654e2c95a.json run proxy\n\n创建系统服务对于服务器来说，可能需要服务一直运行，除了可以选用screen、tmux这类工具外，cloudflared本身自带了服务的安装。$ sudo cloudflared service install然后我们启用cloudflared服务$ sudo systmctl start cloudflared\nEnjoy!本文参考：使用Cloudflare Tunnel实现内网穿透，把服务器架在家里 (bra.live)\n","categories":["笔记"],"tags":["内网穿透","cloudflare","tunnel","frp"]},{"title":"利用Templater插件实现创建双链文件的分类位置","url":"/2024/03/11/%E5%88%A9%E7%94%A8Templater%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%88%9B%E5%BB%BA%E5%8F%8C%E9%93%BE%E6%96%87%E4%BB%B6%E7%9A%84%E5%88%86%E7%B1%BB%E4%BD%8D%E7%BD%AE/","content":"\n利用Templater插件实现双链双链创建文件时自动移动到需要的文件夹中\n\n准备工作\nTemplater插件\nTemplater插件文档)\n\n配置流程配置Templater插件模板\n新建Templater模板存放文件夹templates\n在模板文件夹中新建模板文件，这里随意的取名为Link\n\n配置Link模板\n在模板中写入以下内容\n这份模板的意思在于，当我用双链新建一个文件时，如果在文件名的结尾添加一个W字符，那么将会把这个文件移动到/Work/&#123;filename&#125;中去，它会自动去掉W这个字符，无需担心。\n如果你想自由的控制，我相信你可以看懂这段简单的控制代码，就可以自动的修改了。\n请确保你在移动文件前，你已经新建了相应的文件夹！&lt;%*\t\tlet name = tp.file.title\t\tif (name.endsWith(&quot;W&quot;)) &#123;\t\t   await tp.file.move(&quot;/Work/&quot; + name.substring(0, name.length - 1));\t\t&#125; else if (name.endsWith(&quot;B&quot;)) &#123;\t\t   await tp.file.move(&quot;/Blog/&quot; + name.substring(0, name.length - 1));\t\t&#125; else &#123;\t\t&#125;%&gt; \n\n配置插件   需要注意我的写作流程，我是采用了现在双链的日记流方式，利用日记作为主入口来写作的。\n\n我的文件夹组织结构如下Journal-日记文件夹，默认的入口Blog-需要分享的文件夹Notes-笔记默认存放的文件夹，**双链创建默认文件夹**Work-工作记录文件夹templates-模板文件夹\n设置编辑器——双链创建的文件夹保存在Notes中\n配置Templater插件——Folder Templates项目\n新建一个项目，当在Notes中新建文档时，自动使用Link模板，配置如图\n\n\n\nEnjoy现在你在任何地方使用双链创建文档，都可以按照规则来移动了。例如我的规则：当我用双链创建一个Obsidian使用心得B时，这个文档就会被移动到Blog下面，并命名为Obsidian使用心得 ,是不是非常的Nice!\n","categories":["笔记"],"tags":["obsidian","templater"]},{"title":"家庭网络拓扑-N1旁路由","url":"/2024/03/13/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E6%8B%93%E6%89%91-N1%E6%97%81%E8%B7%AF%E7%94%B1/","content":"\n家庭网络拓扑很重要，每个家庭都有每个家庭的想法，不一而足，没有最好只有适合自己使用的网络拓扑，而我现在用的旁路由拓扑更适合于家庭网络设备默认不需要走旁路由，个别设备需要走旁路由的的这种情况。\n\n网络拓扑图\n释义\n采用光猫桥接的方式接入互联网\n主路由TP-link拨号，并负责无线网络功能以及有线网络功能。\n旁路由N1负责dns，去广告等应用\n客人连接wifi直接dhcp主路由上网\n自用设备手动旁路由设备上网\n\n配置主路由TP-Link配置\nLan口设置\nLan口IP设置：手动\nIP地址：192.168.0.1\n子网掩码：255.255.255.0\n\n\nDHCP设置\nDHCP服务器：开\n地址池开始地址：192.168.0.2\n地址池结束地址：192.168.0.254\n网关：192.168.0.1\n首选DNS：192.168.0.1\n\n\n\n\n旁路由N1配置\n接口-lan配置\n协议：静态协议\nIP地址：192.168.0.2\n子网掩码：255.255.255.0\n网关：192.168.0.1 （这里要指向主路由IP）\nDNS服务：192.168.0.1\nDHCP服务：忽略此接口\n\n\n\n\n设备联网无需走旁路由的设备\n直接连接wifi或者有线网络即可\n\n需要走旁路由的设备\n手动设置网络\nIP：192.168.0.101 （不能重复）\n子网掩码：255.255.255.0\n网关：192.168.0.2 （手动指向旁路由设备）\nDNS服务器：192.168.0.2\n\n\n\nEnjoy！目前网络拓扑是比较理想的情况，不影响正常的使用，同时兼顾一些特殊的情况。如果想特殊情况居多，可以采取倒过来的方式。\n\n关闭主路由的dhcp服务器，改为由旁路由开启dhcp下发ip地址的服务\n同时开启dhcp服务器，有些旁路由器可以直接下发ip地址，这种方式的好处是，旁路由就算下线，主路由也可以很快的接手dhcp服务器，不影响正常的使用，不过我的tp不支持这种情况。\n\n","categories":["笔记"]},{"title":"微软输入法添加小鹤双拼","url":"/2024/03/15/%E5%BE%AE%E8%BD%AF%E8%BE%93%E5%85%A5%E6%B3%95%E6%B7%BB%E5%8A%A0%E5%B0%8F%E9%B9%A4%E5%8F%8C%E6%8B%BC/","content":"\n微软输入法自带的双拼没有小鹤双拼，利用注册表把自带的双拼修改为小鹤双拼。\n\n新建一个文件把以下内容复制进去保存\nWindows Registry Editor Version 5.00[HKEY_CURRENT_USER\\\\SOFTWARE\\\\Microsoft\\\\InputMethod\\\\Settings\\\\CHS]&quot;EnableExtraDomainType&quot;=dword:00000001&quot;Enable Double Pinyin&quot;=dword:00000001&quot;DoublePinyinScheme&quot;=dword:0000000a&quot;UserDefinedDoublePinyinScheme0&quot;=&quot;小鹤双拼*2*^*iuvdjhcwfg^xmlnpbksqszxkrltvyovt&quot;\n修改文件名后缀为reg，执行即可。\n","categories":["笔记"],"tags":["双拼","小鹤双拼","微软输入法"]},{"title":"绿联DXP4800基本使用","url":"/2025/03/06/%E7%BB%BF%E8%81%94DXP4800%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","content":"绿联新系统初探\nweb界面，给我感觉非常的素\nAPP应用中心，默认基本什么都没有带，需要自己安装应用，包括相册和影视\n控制面板，可以看到只有少许的设置\n\n安全性配置强烈不建议把NAS置于公网之上，如果没有正确的防火墙配置，相当于裸奔！\n\n配置自动封锁\n配置双重验证\n防火墙，如果有公网IP，外网访问需求，强烈建议开启\n\n配置Docker**绿联系统的“素”底气来源于Docker**，绿联作为刚进入NAS的厂家，不像群晖和威联通在软件上有所建树，所以支持Docker让用户有更大的扩展性，不绑定！\n\n应用中心安装Docker安装后默认会在共享文件夹中创建一个docker的目录，用于管理compose文件，对于小白来说，也建议使用这个目录，不要自行更改。\n配置Docker镜像加速由于众所周知的原因，docker hub已经无法拉取镜像了，绿联写了一篇文档介绍了一些方法，主要有2种：[绿联文档][https://support.ugnas.com/knowledgecenter/#/detail/eyJ0eXBlIjoidGFnMDAyIiwibGFuZ3VhZ2UiOiJ6aC1DTiIsImlkIjo4OTMsImFydGljbGVJbmZvSWQiOjI5NywiY2xpZW50VHlwZSI6IlBDIiwiYXJ0aWNsZVZlcnNpb24iOiIiLCJwYXRoQ29kZSI6bnVsbH0=]\n配置镜像加速器，这种方式目前并不友好了，镜像的同步缓存问题无解\n配置代理，更建议这种方式。目前绿联只支持http/https代理，相信你有办法解决这个问题。\n\n\n配置好后可以尝试在镜像仓库拉取一下hello镜像看看代理是否配置成功。\n注意：绿联NAS的用户有些奇怪，PID为1000，UID为10，记得设置对应的环境变量，可以减少文件权限的问题。**在应用中心中有几个应用是用docker运行的，比如alist， 青龙， qBittorrent等，强烈不建议安装使用，因为应用中心安装的应用，无法修改compose.yml文件，无法重新定制化。建议自行编写compose.yml文件来编排容器 **\n\n配置绿联自带的内网穿透没什么用处，如果有其他的外网访问方式，不建议用绿联的，只能http/https协议，只能连绿联自己的app\n后记DXP4800的外形我觉得是非常NICE的，系统没有网上说的那么差，但是对于小白确实是不友好的，因为需要自行配置的内容非常的多，但让系统更加的简洁轻量！\n","categories":["笔记"],"tags":["Blog","DXP4800","docker","NAS"]},{"title":"自建tailscale derp服务器","url":"/2024/03/13/%E8%87%AA%E5%BB%BAtailscale%20derp%E6%9C%8D%E5%8A%A1%E5%99%A8/","content":"文章转载浅探 Tailscale DERP 中转服务 | Kiprey’s Blog本篇主要是记录一下配置derp的过程，基本上所有的内容都是来源于上面的文章，有需要的可以直接查阅上面的文章，写的非常好，过程剖析的很到位，吾辈楷模！\n配置要求\n公网ip\n允许tcp&#x2F;udp进站\n\n配置derp服务器安装golang# 需要最新版的golang$ wget https://go.dev/dl/go1.21.6.linux-amd64.tar.gz$ sudo rm -rf /usr/local/go &amp;&amp; sudo tar -C /usr/local -xzf go1.21.6.linux-amd64.tar.gz$ export PATH=$PATH:/usr/local/go/bin# 验证安装版本$ go version# 配置代理以便于国内vps下载,国外vps不需要配置$ go env -w GOPROXY=https://goproxy.cn,direct# 安装tailscale-derper$ go install tailscale.com/cmd/derper@latest\n\n配置Derp服务并用systemd管理# 配置环境变量$ DERP_HOST=&quot;dawnz-derp&quot; #这个名字随意，但需要记住后面自签名证书和derpMap需要用  $ DERP_PORT=8888  $ STUN_PORT=8889# 自签名证书$ mkdir ~/.certdir &amp;&amp; cd ~/.certdir$ openssl genpkey -algorithm RSA -out $&#123;DERP_HOST&#125;.key     $ openssl req -new -key $&#123;DERP_HOST&#125;.key -out $&#123;DERP_HOST&#125;.csr  $ openssl x509 -req \\  \t\t-days 36500 \\  \t\t-in $&#123;DERP_HOST&#125;.csr \\  \t\t-signkey $&#123;DERP_HOST&#125;.key \\  \t\t-out $&#123;DERP_HOST&#125;.crt \\  \t\t-extfile &lt;(printf &quot;subjectAltName=DNS:$&#123;DERP_HOST&#125;&quot;)# 用systemd service启动derp服务## 1. 如果derp是公用的可以直接启动derp服务即可，但是这样如果别人知道你的ip和port，那么其他人也可以连接，使用你中转服务器的流量。## 2. 如果配置derp为私有服务器，则需要把中转服务器也作为一个节点，安装tailscaled登录认证，并在启用derp服务时使用 --verify-clients# 安装tailscaled 并登录验证$ curl -fsSL https://tailscale.com/install.sh | sh$ sudo tailscale up# 创建tailscale-derp.service$ sudo systemctl edit -f tailscale-derp.service# 粘贴如下内容-----------[Unit]  Description=Tailscale derp service  After=network.target    [Service]  ExecStart=/home/$&#123;USER&#125;/go/bin/derper \\      -c /home/$&#123;USER&#125;/.derper.key \\      -a :$&#123;DERP_PORT&#125; -http-port -1 \\      -stun-port $&#123;STUN_PORT&#125; \\      -hostname $&#123;DERP_HOST&#125; \\      --certmode manual \\      -certdir /home/$&#123;USER&#125;/.certdir \\      --verify-clients  Restart=always  User=$&#123;USER&#125;    [Install]  WantedBy=multi-user.target&quot; ------------# 启动服务$ sudo systemctl start tailscale-derp.service# 查看状态$ sudo systemctl status tailscale-derp.service# 开机自启动$ sudo systemctl enable tailscale-derp.service\n配置iptables允许端口流量入站并配置安全组# iptables 配置8888/tcp，8889/udp允许入站$ sudo iptables -A INPUT -p tcp --dport 8888 -j ACCEPT$ sudo iptables -A INPUT -p udp --dport 8888 -j ACCEPT# 有些云服务商需要配置安全组，在网页控制台安全组也要配置这两个入站。\n配置ACLTailscale登录管理控制台，选择Access Controls\n\n添加单个中转服务器注意：HostName配置和上面的DERP_HOST配置的要相同...  &#123;  \t...  \t&quot;acls&quot;: [...],  \t...  \t&quot;ssh&quot;: [...],    ...  \t&quot;derpMap&quot;: &#123;  \t\t&quot;Regions&quot;: &#123;  \t\t\t&quot;900&quot;: &#123;  \t\t\t\t&quot;RegionID&quot;:   900,  \t\t\t\t&quot;RegionCode&quot;: &quot;Dawnz1&quot;,  \t\t\t\t&quot;Nodes&quot;: [  \t\t\t\t\t&#123;  \t\t\t\t\t\t&quot;Name&quot;:             &quot;dawnz-derp1&quot;,  \t\t\t\t\t\t&quot;RegionID&quot;:         900,  \t\t\t\t\t\t&quot;HostName&quot;:         &quot;dawnz-derp&quot;,  \t\t\t\t\t\t&quot;IPv4&quot;:             &quot;xx.xx.xx.xx&quot;,  \t\t\t\t\t\t&quot;DERPPort&quot;:         8888,  \t\t\t\t\t\t&quot;STUNPort&quot;:         8889,  \t\t\t\t\t\t&quot;InsecureForTests&quot;: true,  \t\t\t\t\t&#125;,  \t\t\t\t],  \t\t\t&#125;,  \t\t&#125;,  \t&#125;,    ...  &#125;\n添加多个中转服务器...  &#123;  \t...  \t&quot;acls&quot;: [...],  \t...  \t&quot;ssh&quot;: [...],    ...  \t&quot;derpMap&quot;: &#123;  \t\t&quot;OmitDefaultRegions&quot;: false,\t\t&quot;Regions&quot;: &#123;  \t\t\t&quot;900&quot;: &#123;  \t\t\t\t&quot;RegionID&quot;:   900,  \t\t\t\t&quot;RegionCode&quot;: &quot;Dawnz1&quot;,  \t\t\t\t&quot;Nodes&quot;: [  \t\t\t\t\t&#123;  \t\t\t\t\t\t&quot;Name&quot;:             &quot;dawnz-derp1&quot;,  \t\t\t\t\t\t&quot;RegionID&quot;:         900,  \t\t\t\t\t\t&quot;HostName&quot;:         &quot;dawnz-derp&quot;,  \t\t\t\t\t\t&quot;IPv4&quot;:             &quot;xx.xx.xx.xx&quot;,  \t\t\t\t\t\t&quot;DERPPort&quot;:         8888,  \t\t\t\t\t\t&quot;STUNPort&quot;:         8889,  \t\t\t\t\t\t&quot;InsecureForTests&quot;: true,  \t\t\t\t\t&#125;,  \t\t\t\t],  \t\t\t&#125;,  \t\t\t&quot;901&quot;: &#123;\t\t\t\t&quot;RegionID&quot;:   901,\t\t\t\t&quot;RegionCode&quot;: &quot;Dawnz2&quot;,\t\t\t\t&quot;Nodes&quot;: [\t\t\t\t\t&#123;\t\t\t\t\t\t&quot;Name&quot;:             &quot;Dawnz-derp2&quot;,\t\t\t\t\t\t&quot;RegionID&quot;:         901,\t\t\t\t\t\t&quot;HostName&quot;:         &quot;danwz-derp2&quot;,\t\t\t\t\t\t&quot;IPv4&quot;:             &quot;xx.xx.xx.xx&quot;,\t\t\t\t\t\t&quot;DERPPort&quot;:         8888,\t\t\t\t\t\t&quot;STUNPort&quot;:         8889,\t\t\t\t\t\t&quot;InsecureForTests&quot;: true,\t\t\t\t\t&#125;,\t\t\t\t],\t\t\t&#125;,\t\t&#125;,  \t&#125;,    ...  &#125;\n\n检查中转服务器的状态\n任意一台节点上利用$ tailscale netcheck 命令即可查看derp上线情况，有看到延迟即配置完成。\n因为公用服务器延迟很大，我不想用公用服务器，可以配置&quot;OmitDefaultRegions&quot;: true, 看上节的多个derp配置即可\n\nEnjoy!tailscale的组网能力是真的可以呀，各方面都非常的完全和健壮，免费基本够个人使用了，非常的Nice！唯一的问题是我用电信5g的手机打洞回家600m的联通宽带，测速的上限一直是50m的带宽，不知道是不是udp限制了，不过也足够使用了。\n","categories":["笔记"],"tags":["wireguard","tailscale","tailscale-derp","headscale"]}]